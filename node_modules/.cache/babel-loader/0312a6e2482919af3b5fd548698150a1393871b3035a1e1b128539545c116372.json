{"ast":null,"code":"import $5rwhf$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { clearAnnouncer as $5rwhf$clearAnnouncer, announce as $5rwhf$announce } from \"@react-aria/live-announcer\";\nimport { useRef as $5rwhf$useRef, useEffect as $5rwhf$useEffect } from \"react\";\nimport { useEffectEvent as $5rwhf$useEffectEvent, useGlobalListeners as $5rwhf$useGlobalListeners } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $5rwhf$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {\n  const _async = (0, $5rwhf$useRef)();\n  let {\n    value: value,\n    textValue: textValue,\n    minValue: minValue,\n    maxValue: maxValue,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    onIncrement: onIncrement,\n    onIncrementPage: onIncrementPage,\n    onDecrement: onDecrement,\n    onDecrementPage: onDecrementPage,\n    onDecrementToMin: onDecrementToMin,\n    onIncrementToMax: onIncrementToMax\n  } = props;\n  const stringFormatter = (0, $5rwhf$useLocalizedStringFormatter)((0, $parcel$interopDefault($5rwhf$intlStringsmodulejs)), '@react-aria/spinbutton');\n  const clearAsync = () => clearTimeout(_async.current);\n  // eslint-disable-next-line arrow-body-style\n  (0, $5rwhf$useEffect)(() => {\n    return () => clearAsync();\n  }, []);\n  let onKeyDown = e => {\n    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) return;\n    switch (e.key) {\n      case 'PageUp':\n        if (onIncrementPage) {\n          e.preventDefault();\n          onIncrementPage === null || onIncrementPage === void 0 ? void 0 : onIncrementPage();\n          break;\n        }\n      // fallthrough!\n      case 'ArrowUp':\n      case 'Up':\n        if (onIncrement) {\n          e.preventDefault();\n          onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();\n        }\n        break;\n      case 'PageDown':\n        if (onDecrementPage) {\n          e.preventDefault();\n          onDecrementPage === null || onDecrementPage === void 0 ? void 0 : onDecrementPage();\n          break;\n        }\n      // fallthrough\n      case 'ArrowDown':\n      case 'Down':\n        if (onDecrement) {\n          e.preventDefault();\n          onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();\n        }\n        break;\n      case 'Home':\n        if (onDecrementToMin) {\n          e.preventDefault();\n          onDecrementToMin === null || onDecrementToMin === void 0 ? void 0 : onDecrementToMin();\n        }\n        break;\n      case 'End':\n        if (onIncrementToMax) {\n          e.preventDefault();\n          onIncrementToMax === null || onIncrementToMax === void 0 ? void 0 : onIncrementToMax();\n        }\n        break;\n    }\n  };\n  let isFocused = (0, $5rwhf$useRef)(false);\n  let onFocus = () => {\n    isFocused.current = true;\n  };\n  let onBlur = () => {\n    isFocused.current = false;\n  };\n  // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).\n  // This ensures that macOS VoiceOver announces it as \"minus\" even with other characters between the minus sign\n  // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.\n  // In addition, replace the empty string with the word \"Empty\" so that iOS VoiceOver does not read \"50%\" for an empty field.\n  let ariaTextValue = textValue === '' ? stringFormatter.format('Empty') : (textValue || `${value}`).replace('-', '\\u2212');\n  (0, $5rwhf$useEffect)(() => {\n    if (isFocused.current) {\n      (0, $5rwhf$clearAnnouncer)('assertive');\n      (0, $5rwhf$announce)(ariaTextValue, 'assertive');\n    }\n  }, [ariaTextValue]);\n  const onIncrementPressStart = (0, $5rwhf$useEffectEvent)(initialStepDelay => {\n    clearAsync();\n    onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();\n    // Start spinning after initial delay\n    _async.current = window.setTimeout(() => {\n      if (maxValue === undefined || isNaN(maxValue) || value === undefined || isNaN(value) || value < maxValue) onIncrementPressStart(60);\n    }, initialStepDelay);\n  });\n  const onDecrementPressStart = (0, $5rwhf$useEffectEvent)(initialStepDelay => {\n    clearAsync();\n    onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();\n    // Start spinning after initial delay\n    _async.current = window.setTimeout(() => {\n      if (minValue === undefined || isNaN(minValue) || value === undefined || isNaN(value) || value > minValue) onDecrementPressStart(60);\n    }, initialStepDelay);\n  });\n  let cancelContextMenu = e => {\n    e.preventDefault();\n  };\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $5rwhf$useGlobalListeners)();\n  return {\n    spinButtonProps: {\n      role: 'spinbutton',\n      'aria-valuenow': value !== undefined && !isNaN(value) ? value : undefined,\n      'aria-valuetext': ariaTextValue,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-disabled': isDisabled || undefined,\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onKeyDown: onKeyDown,\n      onFocus: onFocus,\n      onBlur: onBlur\n    },\n    incrementButtonProps: {\n      onPressStart: () => {\n        onIncrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus: onFocus,\n      onBlur: onBlur\n    },\n    decrementButtonProps: {\n      onPressStart: () => {\n        onDecrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\nexport { $d2e8511e6f209edf$export$e908e06f4b8e3402 as useSpinButton };","map":{"version":3,"names":["$d2e8511e6f209edf$export$e908e06f4b8e3402","props","_async","$5rwhf$useRef","value","textValue","minValue","maxValue","isDisabled","isReadOnly","isRequired","onIncrement","onIncrementPage","onDecrement","onDecrementPage","onDecrementToMin","onIncrementToMax","stringFormatter","$5rwhf$useLocalizedStringFormatter","$parcel$interopDefault","$5rwhf$intlStringsmodulejs","clearAsync","clearTimeout","current","$5rwhf$useEffect","onKeyDown","e","ctrlKey","metaKey","shiftKey","altKey","key","preventDefault","isFocused","onFocus","onBlur","ariaTextValue","format","replace","$5rwhf$clearAnnouncer","$5rwhf$announce","onIncrementPressStart","$5rwhf$useEffectEvent","initialStepDelay","window","setTimeout","undefined","isNaN","onDecrementPressStart","cancelContextMenu","addGlobalListener","removeAllGlobalListeners","$5rwhf$useGlobalListeners","spinButtonProps","role","incrementButtonProps","onPressStart","onPressEnd","decrementButtonProps"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@react-aria/spinbutton/dist/packages/@react-aria/spinbutton/src/useSpinButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce, clearAnnouncer} from '@react-aria/live-announcer';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes, InputBase, RangeInputBase, Validation, ValueBase} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {useEffect, useRef} from 'react';\nimport {useEffectEvent, useGlobalListeners} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\n\nexport interface SpinButtonProps extends InputBase, Validation<number>, ValueBase<number>, RangeInputBase<number> {\n  textValue?: string,\n  onIncrement?: () => void,\n  onIncrementPage?: () => void,\n  onDecrement?: () => void,\n  onDecrementPage?: () => void,\n  onDecrementToMin?: () => void,\n  onIncrementToMax?: () => void\n}\n\nexport interface SpinbuttonAria {\n  spinButtonProps: DOMAttributes,\n  incrementButtonProps: AriaButtonProps,\n  decrementButtonProps: AriaButtonProps\n}\n\nexport function useSpinButton(\n  props: SpinButtonProps\n): SpinbuttonAria {\n  const _async = useRef<number>();\n  let {\n    value,\n    textValue,\n    minValue,\n    maxValue,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onIncrement,\n    onIncrementPage,\n    onDecrement,\n    onDecrementPage,\n    onDecrementToMin,\n    onIncrementToMax\n  } = props;\n  const stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/spinbutton');\n\n  const clearAsync = () => clearTimeout(_async.current);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => clearAsync();\n  }, []);\n\n  let onKeyDown = (e) => {\n    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'PageUp':\n        if (onIncrementPage) {\n          e.preventDefault();\n          onIncrementPage?.();\n          break;\n        }\n      // fallthrough!\n      case 'ArrowUp':\n      case 'Up':\n        if (onIncrement) {\n          e.preventDefault();\n          onIncrement?.();\n        }\n        break;\n      case 'PageDown':\n        if (onDecrementPage) {\n          e.preventDefault();\n          onDecrementPage?.();\n          break;\n        }\n      // fallthrough\n      case 'ArrowDown':\n      case 'Down':\n        if (onDecrement) {\n          e.preventDefault();\n          onDecrement?.();\n        }\n        break;\n      case 'Home':\n        if (onDecrementToMin) {\n          e.preventDefault();\n          onDecrementToMin?.();\n        }\n        break;\n      case 'End':\n        if (onIncrementToMax) {\n          e.preventDefault();\n          onIncrementToMax?.();\n        }\n        break;\n    }\n  };\n\n  let isFocused = useRef(false);\n  let onFocus = () => {\n    isFocused.current = true;\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n  };\n\n  // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).\n  // This ensures that macOS VoiceOver announces it as \"minus\" even with other characters between the minus sign\n  // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.\n  // In addition, replace the empty string with the word \"Empty\" so that iOS VoiceOver does not read \"50%\" for an empty field.\n  let ariaTextValue = textValue === '' ? stringFormatter.format('Empty') : (textValue || `${value}`).replace('-', '\\u2212');\n\n  useEffect(() => {\n    if (isFocused.current) {\n      clearAnnouncer('assertive');\n      announce(ariaTextValue, 'assertive');\n    }\n  }, [ariaTextValue]);\n\n  const onIncrementPressStart = useEffectEvent(\n    (initialStepDelay: number) => {\n      clearAsync();\n      onIncrement?.();\n      // Start spinning after initial delay\n      _async.current = window.setTimeout(\n        () => {\n          if ((maxValue === undefined || isNaN(maxValue)) || (value === undefined || isNaN(value)) || value < maxValue) {\n            onIncrementPressStart(60);\n          }\n        },\n        initialStepDelay\n      );\n    }\n  );\n\n  const onDecrementPressStart = useEffectEvent(\n    (initialStepDelay: number) => {\n      clearAsync();\n      onDecrement?.();\n      // Start spinning after initial delay\n      _async.current = window.setTimeout(\n        () => {\n          if ((minValue === undefined || isNaN(minValue)) || (value === undefined || isNaN(value)) || value > minValue) {\n            onDecrementPressStart(60);\n          }\n        },\n        initialStepDelay\n      );\n    }\n  );\n\n  let cancelContextMenu = (e) => {\n    e.preventDefault();\n  };\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  return {\n    spinButtonProps: {\n      role: 'spinbutton',\n      'aria-valuenow': value !== undefined && !isNaN(value) ? value : undefined,\n      'aria-valuetext': ariaTextValue,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-disabled': isDisabled || undefined,\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onKeyDown,\n      onFocus,\n      onBlur\n    },\n    incrementButtonProps: {\n      onPressStart: () => {\n        onIncrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus,\n      onBlur\n    },\n    decrementButtonProps: {\n      onPressStart: () => {\n        onDecrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus,\n      onBlur\n    }\n  };\n}\n"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AAsCO,SAASA,0CACdC,KAAsB;EAEtB,MAAMC,MAAA,GAAS,IAAAC,aAAK;EACpB,IAAI;IAAAC,KAAA,EACFA,KAAK;IAAAC,SAAA,EACLA,SAAS;IAAAC,QAAA,EACTA,QAAQ;IAAAC,QAAA,EACRA,QAAQ;IAAAC,UAAA,EACRA,UAAU;IAAAC,UAAA,EACVA,UAAU;IAAAC,UAAA,EACVA,UAAU;IAAAC,WAAA,EACVA,WAAW;IAAAC,eAAA,EACXA,eAAe;IAAAC,WAAA,EACfA,WAAW;IAAAC,eAAA,EACXA,eAAe;IAAAC,gBAAA,EACfA,gBAAgB;IAAAC,gBAAA,EAChBA;EAAgB,CACjB,GAAGf,KAAA;EACJ,MAAMgB,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAElE,MAAMC,UAAA,GAAaA,CAAA,KAAMC,YAAA,CAAapB,MAAA,CAAOqB,OAAO;EAEpD;EACA,IAAAC,gBAAQ,EAAE;IACR,OAAO,MAAMH,UAAA;EACf,GAAG,EAAE;EAEL,IAAII,SAAA,GAAaC,CAAA;IACf,IAAIA,CAAA,CAAEC,OAAO,IAAID,CAAA,CAAEE,OAAO,IAAIF,CAAA,CAAEG,QAAQ,IAAIH,CAAA,CAAEI,MAAM,IAAIrB,UAAA,EACtD;IAGF,QAAQiB,CAAA,CAAEK,GAAG;MACX,KAAK;QACH,IAAInB,eAAA,EAAiB;UACnBc,CAAA,CAAEM,cAAc;UAChBpB,eAAA,aAAAA,eAAA,uBAAAA,eAAA;UACA;QACF;MACF;MACA,KAAK;MACL,KAAK;QACH,IAAID,WAAA,EAAa;UACfe,CAAA,CAAEM,cAAc;UAChBrB,WAAA,aAAAA,WAAA,uBAAAA,WAAA;QACF;QACA;MACF,KAAK;QACH,IAAIG,eAAA,EAAiB;UACnBY,CAAA,CAAEM,cAAc;UAChBlB,eAAA,aAAAA,eAAA,uBAAAA,eAAA;UACA;QACF;MACF;MACA,KAAK;MACL,KAAK;QACH,IAAID,WAAA,EAAa;UACfa,CAAA,CAAEM,cAAc;UAChBnB,WAAA,aAAAA,WAAA,uBAAAA,WAAA;QACF;QACA;MACF,KAAK;QACH,IAAIE,gBAAA,EAAkB;UACpBW,CAAA,CAAEM,cAAc;UAChBjB,gBAAA,aAAAA,gBAAA,uBAAAA,gBAAA;QACF;QACA;MACF,KAAK;QACH,IAAIC,gBAAA,EAAkB;UACpBU,CAAA,CAAEM,cAAc;UAChBhB,gBAAA,aAAAA,gBAAA,uBAAAA,gBAAA;QACF;QACA;IACJ;EACF;EAEA,IAAIiB,SAAA,GAAY,IAAA9B,aAAK,EAAE;EACvB,IAAI+B,OAAA,GAAUA,CAAA;IACZD,SAAA,CAAUV,OAAO,GAAG;EACtB;EAEA,IAAIY,MAAA,GAASA,CAAA;IACXF,SAAA,CAAUV,OAAO,GAAG;EACtB;EAEA;EACA;EACA;EACA;EACA,IAAIa,aAAA,GAAgB/B,SAAA,KAAc,KAAKY,eAAA,CAAgBoB,MAAM,CAAC,WAAW,CAAChC,SAAA,IAAa,GAAGD,KAAA,EAAO,EAAEkC,OAAO,CAAC,KAAK;EAEhH,IAAAd,gBAAQ,EAAE;IACR,IAAIS,SAAA,CAAUV,OAAO,EAAE;MACrB,IAAAgB,qBAAa,EAAE;MACf,IAAAC,eAAO,EAAEJ,aAAA,EAAe;IAC1B;EACF,GAAG,CAACA,aAAA,CAAc;EAElB,MAAMK,qBAAA,GAAwB,IAAAC,qBAAa,EACxCC,gBAAA;IACCtB,UAAA;IACAV,WAAA,aAAAA,WAAA,uBAAAA,WAAA;IACA;IACAT,MAAA,CAAOqB,OAAO,GAAGqB,MAAA,CAAOC,UAAU,CAChC;MACE,IAAItC,QAAC,KAAauC,SAAA,IAAaC,KAAA,CAAMxC,QAAA,KAAeH,KAAA,KAAU0C,SAAA,IAAaC,KAAA,CAAM3C,KAAA,KAAWA,KAAA,GAAQG,QAAA,EAClGkC,qBAAA,CAAsB;IAE1B,GACAE,gBAAA;EAEJ;EAGF,MAAMK,qBAAA,GAAwB,IAAAN,qBAAa,EACxCC,gBAAA;IACCtB,UAAA;IACAR,WAAA,aAAAA,WAAA,uBAAAA,WAAA;IACA;IACAX,MAAA,CAAOqB,OAAO,GAAGqB,MAAA,CAAOC,UAAU,CAChC;MACE,IAAIvC,QAAC,KAAawC,SAAA,IAAaC,KAAA,CAAMzC,QAAA,KAAeF,KAAA,KAAU0C,SAAA,IAAaC,KAAA,CAAM3C,KAAA,KAAWA,KAAA,GAAQE,QAAA,EAClG0C,qBAAA,CAAsB;IAE1B,GACAL,gBAAA;EAEJ;EAGF,IAAIM,iBAAA,GAAqBvB,CAAA;IACvBA,CAAA,CAAEM,cAAc;EAClB;EAEA,IAAI;IAAAkB,iBAAA,EAACA,iBAAiB;IAAAC,wBAAA,EAAEA;EAAwB,CAAC,GAAG,IAAAC,yBAAiB;EAErE,OAAO;IACLC,eAAA,EAAiB;MACfC,IAAA,EAAM;MACN,iBAAiBlD,KAAA,KAAU0C,SAAA,IAAa,CAACC,KAAA,CAAM3C,KAAA,IAASA,KAAA,GAAQ0C,SAAA;MAChE,kBAAkBV,aAAA;MAClB,iBAAiB9B,QAAA;MACjB,iBAAiBC,QAAA;MACjB,iBAAiBC,UAAA,IAAcsC,SAAA;MAC/B,iBAAiBrC,UAAA,IAAcqC,SAAA;MAC/B,iBAAiBpC,UAAA,IAAcoC,SAAA;iBAC/BrB,SAAA;eACAS,OAAA;cACAC;IACF;IACAoB,oBAAA,EAAsB;MACpBC,YAAA,EAAcA,CAAA;QACZf,qBAAA,CAAsB;QACtBS,iBAAA,CAAkBN,MAAA,EAAQ,eAAeK,iBAAA;MAC3C;MACAQ,UAAA,EAAYA,CAAA;QACVpC,UAAA;QACA8B,wBAAA;MACF;eACAjB,OAAA;cACAC;IACF;IACAuB,oBAAA,EAAsB;MACpBF,YAAA,EAAcA,CAAA;QACZR,qBAAA,CAAsB;QACtBE,iBAAA,CAAkBN,MAAA,EAAQ,eAAeK,iBAAA;MAC3C;MACAQ,UAAA,EAAYA,CAAA;QACVpC,UAAA;QACA8B,wBAAA;MACF;eACAjB,OAAA;cACAC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}