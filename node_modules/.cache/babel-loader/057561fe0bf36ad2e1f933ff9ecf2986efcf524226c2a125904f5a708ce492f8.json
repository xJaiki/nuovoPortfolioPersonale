{"ast":null,"code":"import { convertValue as $35a22f14a1f04b11$export$61a490a80c552550, createPlaceholderDate as $35a22f14a1f04b11$export$66aa2b09de4b1ea5, getFormatOptions as $35a22f14a1f04b11$export$7e319ea407e63bc0, getValidationResult as $35a22f14a1f04b11$export$f18627323ab57ac0, useDefaultProps as $35a22f14a1f04b11$export$2440da353cedad43 } from \"./utils.mjs\";\nimport { getPlaceholder as $3e3ed55ab2966714$export$d3f5c5e0a5023fa0 } from \"./placeholders.mjs\";\nimport { DateFormatter as $g03ag$DateFormatter, toCalendar as $g03ag$toCalendar, GregorianCalendar as $g03ag$GregorianCalendar, getMinimumMonthInYear as $g03ag$getMinimumMonthInYear, getMinimumDayInMonth as $g03ag$getMinimumDayInMonth } from \"@internationalized/date\";\nimport { useFormValidationState as $g03ag$useFormValidationState } from \"@react-stately/form\";\nimport { useControlledState as $g03ag$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $g03ag$useMemo, useState as $g03ag$useState, useRef as $g03ag$useRef, useEffect as $g03ag$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\nconst $3c0fc76039f1c516$var$PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n// Node seems to convert everything to lowercase...\nconst $3c0fc76039f1c516$var$TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\nfunction $3c0fc76039f1c516$export$60e84778edff6d26(props) {\n  let {\n    locale: locale,\n    createCalendar: createCalendar,\n    hideTimeZone: hideTimeZone,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    minValue: minValue,\n    maxValue: maxValue,\n    isDateUnavailable: isDateUnavailable\n  } = props;\n  let v = props.value || props.defaultValue || props.placeholderValue;\n  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC';\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  let defaultFormatter = (0, $g03ag$useMemo)(() => new (0, $g03ag$DateFormatter)(locale), [locale]);\n  let calendar = (0, $g03ag$useMemo)(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n  let [value, setDate] = (0, $g03ag$useControlledState)(props.value, props.defaultValue, props.onChange);\n  let calendarValue = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [value, calendar]);\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = (0, $g03ag$useState)(() => (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n  let formatOpts = (0, $g03ag$useMemo)(() => {\n    var _props_maxGranularity;\n    return {\n      granularity: granularity,\n      maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',\n      timeZone: defaultTimeZone,\n      hideTimeZone: hideTimeZone,\n      hourCycle: props.hourCycle,\n      showEra: showEra,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros\n    };\n  }, [props.maxGranularity, granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [formatOpts]);\n  let dateFormatter = (0, $g03ag$useMemo)(() => new (0, $g03ag$DateFormatter)(locale, opts), [locale, opts]);\n  let resolvedOptions = (0, $g03ag$useMemo)(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments = (0, $g03ag$useMemo)(() => dateFormatter.formatToParts(new Date()).filter(seg => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[seg.type] = true, p), {}), [dateFormatter]);\n  let [validSegments, setValidSegments] = (0, $g03ag$useState)(() => props.value || props.defaultValue ? {\n    ...allSegments\n  } : {});\n  let clearedSegment = (0, $g03ag$useRef)();\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = (0, $g03ag$useRef)(calendar.identifier);\n  (0, $g03ag$useEffect)(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder => Object.keys(validSegments).length > 0 ? (0, $g03ag$toCalendar)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {\n      ...allSegments\n    };\n    setValidSegments(validSegments);\n  }\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = newValue => {\n    if (props.isDisabled || props.isReadOnly) return;\n    let validKeys = Object.keys(validSegments);\n    let allKeys = Object.keys(allSegments);\n    // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n    if (newValue == null) {\n      setDate(null);\n      setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n      setValidSegments({});\n    } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== 'dayPeriod') {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = (0, $g03ag$toCalendar)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, $g03ag$GregorianCalendar)());\n      setDate(newValue);\n    } else setPlaceholderDate(newValue);\n    clearedSegment.current = null;\n  };\n  let dateValue = (0, $g03ag$useMemo)(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = (0, $g03ag$useMemo)(() => dateFormatter.formatToParts(dateValue).map(segment => {\n    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];\n    if (segment.type === 'era' && calendar.getEras().length === 1) isEditable = false;\n    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;\n    return {\n      type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,\n      text: isPlaceholder ? placeholder : segment.value,\n      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),\n      isPlaceholder: isPlaceholder,\n      placeholder: placeholder,\n      isEditable: isEditable\n    };\n  }), [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({\n      ...validSegments\n    });\n  }\n  let markValid = part => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  };\n  let adjustSegment = (type, amount) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);\n    } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));\n  };\n  let builtinValidation = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n  let validation = (0, $g03ag$useFormValidationState)({\n    ...props,\n    value: value,\n    builtinValidation: builtinValidation\n  });\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n  var _props_maxGranularity;\n  return {\n    ...validation,\n    value: calendarValue,\n    dateValue: dateValue,\n    calendar: calendar,\n    setValue: setValue,\n    segments: segments,\n    dateFormatter: dateFormatter,\n    validationState: validationState,\n    isInvalid: isValueInvalid,\n    granularity: granularity,\n    maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) return;\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {\n          ...allSegments\n        };\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      clearedSegment.current = part;\n      setValidSegments({\n        ...validSegments\n      });\n      let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n      // Reset day period to default without changing the hour.\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) value = displayValue.set({\n          hour: displayValue.hour - 12\n        });else if (!isPM && shouldBePM) value = displayValue.set({\n          hour: displayValue.hour + 12\n        });\n      } else if (part in displayValue) value = displayValue.set({\n        [part]: placeholder[part]\n      });\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions) {\n      if (!calendarValue) return '';\n      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n      let formatter = new (0, $g03ag$DateFormatter)(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\nfunction $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {\n  switch (type) {\n    case 'era':\n      {\n        let eras = date.calendar.getEras();\n        return {\n          value: eras.indexOf(date.era),\n          minValue: 0,\n          maxValue: eras.length - 1\n        };\n      }\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case 'month':\n      return {\n        value: date.month,\n        minValue: (0, $g03ag$getMinimumMonthInYear)(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case 'day':\n      return {\n        value: date.day,\n        minValue: (0, $g03ag$getMinimumDayInMonth)(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n  if ('hour' in date) switch (type) {\n    case 'dayPeriod':\n      return {\n        value: date.hour >= 12 ? 12 : 0,\n        minValue: 0,\n        maxValue: 12\n      };\n    case 'hour':\n      if (options.hour12) {\n        let isPM = date.hour >= 12;\n        return {\n          value: date.hour,\n          minValue: isPM ? 12 : 0,\n          maxValue: isPM ? 23 : 11\n        };\n      }\n      return {\n        value: date.hour,\n        minValue: 0,\n        maxValue: 23\n      };\n    case 'minute':\n      return {\n        value: date.minute,\n        minValue: 0,\n        maxValue: 59\n      };\n    case 'second':\n      return {\n        value: date.second,\n        minValue: 0,\n        maxValue: 59\n      };\n  }\n  return {};\n}\nfunction $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {\n        round: part === 'year'\n      });\n  }\n  if ('hour' in value) switch (part) {\n    case 'dayPeriod':\n      {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({\n          hour: isPM ? hours - 12 : hours + 12\n        });\n      }\n    case 'hour':\n    case 'minute':\n    case 'second':\n      return value.cycle(part, amount, {\n        round: part !== 'hour',\n        hourCycle: options.hour12 ? 12 : 24\n      });\n  }\n}\nfunction $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n  if ('hour' in value) switch (part) {\n    case 'dayPeriod':\n      {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) return value;\n        return value.set({\n          hour: wasPM ? hours - 12 : hours + 12\n        });\n      }\n    case 'hour':\n      // In 12 hour time, ensure that AM/PM does not change\n      if (options.hour12) {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        if (!wasPM && segmentValue === 12) segmentValue = 0;\n        if (wasPM && segmentValue < 12) segmentValue += 12;\n      }\n    // fallthrough\n    case 'minute':\n    case 'second':\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n}\nexport { $3c0fc76039f1c516$export$60e84778edff6d26 as useDateFieldState };","map":{"version":3,"names":["$3c0fc76039f1c516$var$EDITABLE_SEGMENTS","year","month","day","hour","minute","second","dayPeriod","era","$3c0fc76039f1c516$var$PAGE_STEP","$3c0fc76039f1c516$var$TYPE_MAPPING","dayperiod","$3c0fc76039f1c516$export$60e84778edff6d26","props","locale","createCalendar","hideTimeZone","isDisabled","isReadOnly","isRequired","minValue","maxValue","isDateUnavailable","v","value","defaultValue","placeholderValue","granularity","defaultTimeZone","$35a22f14a1f04b11$export$2440da353cedad43","timeZone","Error","toString","defaultFormatter","$g03ag$useMemo","$g03ag$DateFormatter","calendar","resolvedOptions","setDate","$g03ag$useControlledState","onChange","calendarValue","$35a22f14a1f04b11$export$61a490a80c552550","placeholderDate","setPlaceholderDate","$g03ag$useState","$35a22f14a1f04b11$export$66aa2b09de4b1ea5","val","showEra","identifier","formatOpts","_props_maxGranularity","maxGranularity","hourCycle","shouldForceLeadingZeros","opts","$35a22f14a1f04b11$export$7e319ea407e63bc0","dateFormatter","allSegments","formatToParts","Date","filter","seg","type","reduce","p","validSegments","setValidSegments","clearedSegment","$g03ag$useRef","lastCalendarIdentifier","$g03ag$useEffect","current","placeholder","Object","keys","length","$g03ag$toCalendar","displayValue","setValue","newValue","validKeys","allKeys","$g03ag$GregorianCalendar","dateValue","toDate","segments","map","segment","isEditable","getEras","isPlaceholder","$3e3ed55ab2966714$export$d3f5c5e0a5023fa0","text","$3c0fc76039f1c516$var$getSegmentLimits","markValid","part","adjustSegment","amount","$3c0fc76039f1c516$var$addSegment","builtinValidation","$35a22f14a1f04b11$export$f18627323ab57ac0","validation","$g03ag$useFormValidationState","isValueInvalid","displayValidation","isInvalid","validationState","increment","decrement","incrementPage","decrementPage","setSegment","$3c0fc76039f1c516$var$setSegment","confirmPlaceholder","copy","clearSegment","isPM","shouldBePM","set","formatValue","fieldOptions","formatOptions","formatter","format","date","options","eras","indexOf","getYearsInEra","$g03ag$getMinimumMonthInYear","getMonthsInYear","$g03ag$getMinimumDayInMonth","getDaysInMonth","hour12","cycle","round","hours","segmentValue","wasPM"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-stately/datepicker/dist/packages/@react-stately/datepicker/src/useDateFieldState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, DateFormatter, getMinimumDayInMonth, getMinimumMonthInYear, GregorianCalendar, toCalendar} from '@internationalized/date';\nimport {convertValue, createPlaceholderDate, FieldOptions, getFormatOptions, getValidationResult, useDefaultProps} from './utils';\nimport {DatePickerProps, DateValue, Granularity} from '@react-types/datepicker';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {getPlaceholder} from './placeholders';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport type SegmentType = 'era' | 'year' | 'month' | 'day' |  'hour' | 'minute' | 'second' | 'dayPeriod' | 'literal' | 'timeZoneName';\nexport interface DateSegment {\n  /** The type of segment. */\n  type: SegmentType,\n  /** The formatted text for the segment. */\n  text: string,\n  /** The numeric value for the segment, if applicable. */\n  value?: number,\n  /** The minimum numeric value for the segment, if applicable. */\n  minValue?: number,\n  /** The maximum numeric value for the segment, if applicable. */\n  maxValue?: number,\n  /** Whether the value is a placeholder. */\n  isPlaceholder: boolean,\n  /** A placeholder string for the segment. */\n  placeholder: string,\n  /** Whether the segment is editable. */\n  isEditable: boolean\n}\n\nexport interface DateFieldState extends FormValidationState {\n  /** The current field value. */\n  value: DateValue,\n  /** The current value, converted to a native JavaScript `Date` object.  */\n  dateValue: Date,\n  /** The calendar system currently in use. */\n  calendar: Calendar,\n  /** Sets the field's value. */\n  setValue(value: DateValue): void,\n  /** A list of segments for the current value. */\n  segments: DateSegment[],\n  /** A date formatter configured for the current locale and format. */\n  dateFormatter: DateFormatter,\n  /**\n   * The current validation state of the date field, based on the `validationState`, `minValue`, and `maxValue` props.\n   * @deprecated Use `isInvalid` instead.\n   */\n  validationState: ValidationState,\n  /** Whether the date field is invalid, based on the `isInvalid`, `minValue`, and `maxValue` props. */\n  isInvalid: boolean,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** The maximum date or time unit that is displayed in the field. */\n  maxGranularity: 'year' | 'month' | Granularity,\n  /** Whether the field is disabled. */\n  isDisabled: boolean,\n  /** Whether the field is read only. */\n  isReadOnly: boolean,\n  /** Whether the field is required. */\n  isRequired: boolean,\n  /** Increments the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  increment(type: SegmentType): void,\n  /** Decrements the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  decrement(type: SegmentType): void,\n  /**\n   * Increments the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to increment by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  incrementPage(type: SegmentType): void,\n  /**\n   * Decrements the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to decrement by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  decrementPage(type: SegmentType): void,\n  /** Sets the value of the given segment. */\n  setSegment(type: 'era', value: string): void,\n  setSegment(type: SegmentType, value: number): void,\n  /** Updates the remaining unfilled segments with the placeholder value. */\n  confirmPlaceholder(): void,\n  /** Clears the value of the given segment, reverting it to the placeholder. */\n  clearSegment(type: SegmentType): void,\n  /** Formats the current date value using the given options. */\n  formatValue(fieldOptions: FieldOptions): string\n}\n\nconst EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\n\nconst PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n\n// Node seems to convert everything to lowercase...\nconst TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\n\nexport interface DateFieldStateOptions<T extends DateValue = DateValue> extends DatePickerProps<T> {\n  /**\n   * The maximum unit to display in the date field.\n   * @default 'year'\n   */\n  maxGranularity?: 'year' | 'month' | Granularity,\n  /** The locale to display and edit the value according to. */\n  locale: string,\n  /**\n   * A function that creates a [Calendar](../internationalized/date/Calendar.html)\n   * object for a given calendar identifier. Such a function may be imported from the\n   * `@internationalized/date` package, or manually implemented to include support for\n   * only certain calendars.\n   */\n  createCalendar: (name: string) => Calendar\n}\n\n/**\n * Provides state management for a date field component.\n * A date field allows users to enter and edit date and time values using a keyboard.\n * Each part of a date value is displayed in an individually editable segment.\n */\nexport function useDateFieldState<T extends DateValue = DateValue>(props: DateFieldStateOptions<T>): DateFieldState {\n  let {\n    locale,\n    createCalendar,\n    hideTimeZone,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    minValue,\n    maxValue,\n    isDateUnavailable\n  } = props;\n\n  let v: DateValue = (props.value || props.defaultValue || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC';\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let defaultFormatter = useMemo(() => new DateFormatter(locale), [locale]);\n  let calendar = useMemo(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n\n  let [value, setDate] = useControlledState<DateValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let calendarValue = useMemo(() => convertValue(value, calendar), [value, calendar]);\n\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = useState(\n    () => createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n  );\n\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n  let formatOpts = useMemo(() => ({\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    timeZone: defaultTimeZone,\n    hideTimeZone,\n    hourCycle: props.hourCycle,\n    showEra,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros\n  }), [props.maxGranularity, granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = useMemo(() => getFormatOptions({}, formatOpts), [formatOpts]);\n\n  let dateFormatter = useMemo(() => new DateFormatter(locale, opts), [locale, opts]);\n  let resolvedOptions = useMemo(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments: Partial<typeof EDITABLE_SEGMENTS> = useMemo(() =>\n    dateFormatter.formatToParts(new Date())\n      .filter(seg => EDITABLE_SEGMENTS[seg.type])\n      .reduce((p, seg) => (p[seg.type] = true, p), {})\n  , [dateFormatter]);\n\n  let [validSegments, setValidSegments] = useState<Partial<typeof EDITABLE_SEGMENTS>>(\n    () => props.value || props.defaultValue ? {...allSegments} : {}\n  );\n\n  let clearedSegment = useRef<string>();\n\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = useRef(calendar.identifier);\n  useEffect(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder =>\n        Object.keys(validSegments).length > 0\n          ? toCalendar(placeholder, calendar)\n          : createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n      );\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {...allSegments};\n    setValidSegments(validSegments);\n  }\n\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = (newValue: DateValue) => {\n    if (props.isDisabled || props.isReadOnly) {\n      return;\n    }\n    let validKeys = Object.keys(validSegments);\n    let allKeys = Object.keys(allSegments);\n\n    // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n    if (newValue == null) {\n      setDate(null);\n      setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n      setValidSegments({});\n    } else if (validKeys.length >= allKeys.length || (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== 'dayPeriod')) {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = toCalendar(newValue, v?.calendar || new GregorianCalendar());\n      setDate(newValue);\n    } else {\n      setPlaceholderDate(newValue);\n    }\n    clearedSegment.current = null;\n  };\n\n  let dateValue = useMemo(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = useMemo(() =>\n    dateFormatter.formatToParts(dateValue)\n      .map(segment => {\n        let isEditable = EDITABLE_SEGMENTS[segment.type];\n        if (segment.type === 'era' && calendar.getEras().length === 1) {\n          isEditable = false;\n        }\n\n        let isPlaceholder = EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n        let placeholder = EDITABLE_SEGMENTS[segment.type] ? getPlaceholder(segment.type, segment.value, locale) : null;\n        return {\n          type: TYPE_MAPPING[segment.type] || segment.type,\n          text: isPlaceholder ? placeholder : segment.value,\n          ...getSegmentLimits(displayValue, segment.type, resolvedOptions),\n          isPlaceholder,\n          placeholder,\n          isEditable\n        } as DateSegment;\n      })\n  , [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({...validSegments});\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({...validSegments});\n  }\n\n  let markValid = (part: Intl.DateTimeFormatPartTypes) => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) {\n      validSegments.era = true;\n    }\n    setValidSegments({...validSegments});\n  };\n\n  let adjustSegment = (type: Intl.DateTimeFormatPartTypes, amount: number) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length >= allKeys.length || (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod)) {\n        setValue(displayValue);\n      }\n    } else {\n      setValue(addSegment(displayValue, type, amount, resolvedOptions));\n    }\n  };\n\n  let builtinValidation = useMemo(() => getValidationResult(\n    value,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    formatOpts\n  ), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n\n  let validation = useFormValidationState({\n    ...props,\n    value,\n    builtinValidation\n  });\n\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState: ValidationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n\n  return {\n    ...validation,\n    value: calendarValue,\n    dateValue,\n    calendar,\n    setValue,\n    segments,\n    dateFormatter,\n    validationState,\n    isInvalid: isValueInvalid,\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -(PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue(setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) {\n        return;\n      }\n\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {...allSegments};\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      clearedSegment.current = part;\n      setValidSegments({...validSegments});\n\n      let placeholder = createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n\n      // Reset day period to default without changing the hour.\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour - 12});\n        } else if (!isPM && shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour + 12});\n        }\n      } else if (part in displayValue) {\n        value = displayValue.set({[part]: placeholder[part]});\n      }\n\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions: FieldOptions) {\n      if (!calendarValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, formatOpts);\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n\nfunction getSegmentLimits(date: DateValue, type: string, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (type) {\n    case 'era': {\n      let eras = date.calendar.getEras();\n      return {\n        value: eras.indexOf(date.era),\n        minValue: 0,\n        maxValue: eras.length - 1\n      };\n    }\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case 'month':\n      return {\n        value: date.month,\n        minValue: getMinimumMonthInYear(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case 'day':\n      return {\n        value: date.day,\n        minValue: getMinimumDayInMonth(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n\n  if ('hour' in date) {\n    switch (type) {\n      case 'dayPeriod':\n        return {\n          value: date.hour >= 12 ? 12 : 0,\n          minValue: 0,\n          maxValue: 12\n        };\n      case 'hour':\n        if (options.hour12) {\n          let isPM = date.hour >= 12;\n          return {\n            value: date.hour,\n            minValue: isPM ? 12 : 0,\n            maxValue: isPM ? 23 : 11\n          };\n        }\n\n        return {\n          value: date.hour,\n          minValue: 0,\n          maxValue: 23\n        };\n      case 'minute':\n        return {\n          value: date.minute,\n          minValue: 0,\n          maxValue: 59\n        };\n      case 'second':\n        return {\n          value: date.second,\n          minValue: 0,\n          maxValue: 59\n        };\n    }\n  }\n\n  return {};\n}\n\nfunction addSegment(value: DateValue, part: string, amount: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {round: part === 'year'});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({hour: isPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return value.cycle(part, amount, {\n          round: part !== 'hour',\n          hourCycle: options.hour12 ? 12 : 24\n        });\n    }\n  }\n}\n\nfunction setSegment(value: DateValue, part: string, segmentValue: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({[part]: segmentValue});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) {\n          return value;\n        }\n        return value.set({hour: wasPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n        // In 12 hour time, ensure that AM/PM does not change\n        if (options.hour12) {\n          let hours = value.hour;\n          let wasPM = hours >= 12;\n          if (!wasPM && segmentValue === 12) {\n            segmentValue = 0;\n          }\n          if (wasPM && segmentValue < 12) {\n            segmentValue += 12;\n          }\n        }\n        // fallthrough\n      case 'minute':\n      case 'second':\n        return value.set({[part]: segmentValue});\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}