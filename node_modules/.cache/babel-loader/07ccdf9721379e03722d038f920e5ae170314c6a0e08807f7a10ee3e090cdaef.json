{"ast":null,"code":"import { listData as $b1f0cad8af73213b$export$3585ede4d035bf14 } from \"./utils.mjs\";\nimport { filterDOMProps as $by1yQ$filterDOMProps, useId as $by1yQ$useId, mergeProps as $by1yQ$mergeProps } from \"@react-aria/utils\";\nimport { useFocusWithin as $by1yQ$useFocusWithin } from \"@react-aria/interactions\";\nimport { useLabel as $by1yQ$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $by1yQ$useSelectableList } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  let domProps = (0, $by1yQ$filterDOMProps)(props, {\n    labelable: true\n  });\n  // Use props instead of state here. We don't want this to change due to long press.\n  let selectionBehavior = props.selectionBehavior || 'toggle';\n  let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action')\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = 'override';\n  let {\n    listProps: listProps\n  } = (0, $by1yQ$useSelectableList)({\n    ...props,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    linkBehavior: linkBehavior\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $by1yQ$useFocusWithin)({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n  // Share list id and some props with child options.\n  let id = (0, $by1yQ$useId)(props.id);\n  (0, $b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior: linkBehavior\n  });\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = (0, $by1yQ$useLabel)({\n    ...props,\n    id: id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  return {\n    labelProps: labelProps,\n    listBoxProps: (0, $by1yQ$mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...(0, $by1yQ$mergeProps)(fieldProps, listProps)\n    })\n  };\n}\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox };","map":{"version":3,"names":["$c132121280ec012d$export$50eacbbf140a3141","props","state","ref","domProps","$by1yQ$filterDOMProps","labelable","selectionBehavior","linkBehavior","listProps","$by1yQ$useSelectableList","selectionManager","collection","disabledKeys","focusWithinProps","$by1yQ$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","id","$by1yQ$useId","$b1f0cad8af73213b$export$3585ede4d035bf14","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","onAction","labelProps","fieldProps","$by1yQ$useLabel","labelElementType","listBoxProps","$by1yQ$mergeProps","selectionMode","role"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/listbox/dist/packages/@react-aria/listbox/src/useListBox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {RefObject} from 'react';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'override'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  // Use props instead of state here. We don't want this to change due to long press.\n  let selectionBehavior = props.selectionBehavior || 'toggle';\n  let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');\n  if (selectionBehavior === 'toggle' && linkBehavior === 'action') {\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = 'override';\n  }\n\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    linkBehavior\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAkEO,SAASA,0CAAcC,KAA4B,EAAEC,KAAmB,EAAEC,GAA2B;EAC1G,IAAIC,QAAA,GAAW,IAAAC,qBAAa,EAAEJ,KAAA,EAAO;IAACK,SAAA,EAAW;EAAI;EACrD;EACA,IAAIC,iBAAA,GAAoBN,KAAA,CAAMM,iBAAiB,IAAI;EACnD,IAAIC,YAAA,GAAeP,KAAA,CAAMO,YAAY,KAAKD,iBAAA,KAAsB,YAAY,WAAW,UAAS;EAChG,IAAIA,iBAAA,KAAsB,YAAYC,YAAA,KAAiB;IACrD;IACA;IACA;IACAA,YAAA,GAAe;EAGjB,IAAI;IAAAC,SAAA,EAACA;EAAS,CAAC,GAAG,IAAAC,wBAAgB,EAAE;IAClC,GAAGT,KAAK;SACRE,GAAA;IACAQ,gBAAA,EAAkBT,KAAA,CAAMS,gBAAgB;IACxCC,UAAA,EAAYV,KAAA,CAAMU,UAAU;IAC5BC,YAAA,EAAcX,KAAA,CAAMW,YAAY;kBAChCL;EACF;EAEA,IAAI;IAAAM,gBAAA,EAACA;EAAgB,CAAC,GAAG,IAAAC,qBAAa,EAAE;IACtCC,aAAA,EAAef,KAAA,CAAMgB,OAAO;IAC5BC,YAAA,EAAcjB,KAAA,CAAMkB,MAAM;IAC1BC,mBAAA,EAAqBnB,KAAA,CAAMoB;EAC7B;EAEA;EACA,IAAIC,EAAA,GAAK,IAAAC,YAAI,EAAEtB,KAAA,CAAMqB,EAAE;EACvB,IAAAE,yCAAO,EAAEC,GAAG,CAACvB,KAAA,EAAO;QAClBoB,EAAA;IACAI,qBAAA,EAAuBzB,KAAA,CAAMyB,qBAAqB;IAClDC,qBAAA,EAAuB1B,KAAA,CAAM0B,qBAAqB;IAClDC,kBAAA,EAAoB3B,KAAA,CAAM2B,kBAAkB;IAC5CC,aAAA,EAAe5B,KAAA,CAAM4B,aAAa;IAClCC,QAAA,EAAU7B,KAAA,CAAM6B,QAAQ;kBACxBtB;EACF;EAEA,IAAI;IAAAuB,UAAA,EAACA,UAAU;IAAAC,UAAA,EAAEA;EAAU,CAAC,GAAG,IAAAC,eAAO,EAAE;IACtC,GAAGhC,KAAK;QACRqB,EAAA;IACA;IACA;IACAY,gBAAA,EAAkB;EACpB;EAEA,OAAO;gBACLH,UAAA;IACAI,YAAA,EAAc,IAAAC,iBAAS,EAAEhC,QAAA,EAAUU,gBAAA,EAAkBZ,KAAA,CAAMS,gBAAgB,CAAC0B,aAAa,KAAK,aAAa;MACzG,wBAAwB;IAC1B,IAAI,CAAC,GAAG;MACNC,IAAA,EAAM;MACN,GAAG,IAAAF,iBAAS,EAAEJ,UAAA,EAAYvB,SAAA;IAC5B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}