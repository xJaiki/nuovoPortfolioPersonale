{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */function $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  let res = new Set();\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  let toUpdate = new Set();\n  for (let key of a.keys()) if (b.has(key)) toUpdate.add(key);\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\nfunction* $fc36f9a046a9ce79$export$cfc14088dfefce5f(...iterators) {\n  for (let iterator of iterators) yield* iterator;\n}\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  let res = {};\n  for (let key in object) res[object[key]] = key;\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n  for (let key of a) {\n    if (!b.has(key)) return false;\n  }\n  return true;\n}\nexport { $fc36f9a046a9ce79$export$37a26b283fd7740e as keyDiff, $fc36f9a046a9ce79$export$acaf96a27438246b as difference, $fc36f9a046a9ce79$export$cfc14088dfefce5f as concatIterators, $fc36f9a046a9ce79$export$6897c284b6f9f4dc as invert, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64 as isSetEqual };","map":{"version":3,"names":["$fc36f9a046a9ce79$export$37a26b283fd7740e","a","b","res","Set","key","keys","has","add","$fc36f9a046a9ce79$export$acaf96a27438246b","toRemove","toAdd","toUpdate","$fc36f9a046a9ce79$export$cfc14088dfefce5f","iterators","iterator","$fc36f9a046a9ce79$export$6897c284b6f9f4dc","object","$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64","size"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/utils.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"mappings":"AAAA;;;;;;;;;;GAYO,SAASA,0CAAWC,CAAc,EAAEC,CAAc;EACvD,IAAIC,GAAA,GAAM,IAAIC,GAAA;EAEd,KAAK,IAAIC,GAAA,IAAOJ,CAAA,CAAEK,IAAI,IACpB,IAAI,CAACJ,CAAA,CAAEK,GAAG,CAACF,GAAA,GACTF,GAAA,CAAIK,GAAG,CAACH,GAAA;EAIZ,OAAOF,GAAA;AACT;AAOO,SAASM,0CAAcR,CAAc,EAAEC,CAAc;EAC1D,IAAIQ,QAAA,GAAWV,yCAAA,CAAQC,CAAA,EAAGC,CAAA;EAC1B,IAAIS,KAAA,GAAQX,yCAAA,CAAQE,CAAA,EAAGD,CAAA;EACvB,IAAIW,QAAA,GAAW,IAAIR,GAAA;EACnB,KAAK,IAAIC,GAAA,IAAOJ,CAAA,CAAEK,IAAI,IACpB,IAAIJ,CAAA,CAAEK,GAAG,CAACF,GAAA,GACRO,QAAA,CAASJ,GAAG,CAACH,GAAA;EAGjB,OAAO;cAACK,QAAA;WAAUC,KAAA;cAAOC;EAAQ;AACnC;AAMO,UAAUC,0CAAmB,GAAGC,SAAwB;EAC7D,KAAK,IAAIC,QAAA,IAAYD,SAAA,EACnB,OAAOC,QAAA;AAEX;AAMO,SAASC,0CAAOC,MAAM;EAC3B,IAAId,GAAA,GAAM,CAAC;EACX,KAAK,IAAIE,GAAA,IAAOY,MAAA,EACdd,GAAG,CAACc,MAAM,CAACZ,GAAA,CAAI,CAAC,GAAGA,GAAA;EAGrB,OAAOF,GAAA;AACT;AAGO,SAASe,0CAAcjB,CAAS,EAAEC,CAAS;EAChD,IAAID,CAAA,KAAMC,CAAA,EACR,OAAO;EAGT,IAAID,CAAA,CAAEkB,IAAI,KAAKjB,CAAA,CAAEiB,IAAI,EACnB,OAAO;EAGT,KAAK,IAAId,GAAA,IAAOJ,CAAA,EAAG;IACjB,IAAI,CAACC,CAAA,CAAEK,GAAG,CAACF,GAAA,GACT,OAAO;EAEX;EAEA,OAAO;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}