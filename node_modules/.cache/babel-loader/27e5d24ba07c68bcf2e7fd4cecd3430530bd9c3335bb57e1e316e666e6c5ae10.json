{"ast":null,"code":"\"use client\";\n\n// src/use-table.ts\nimport { useCallback } from \"react\";\nimport { useTableState } from \"@react-stately/table\";\nimport { useTable as useReactAriaTable } from \"@react-aria/table\";\nimport { mapPropsVariants, useProviderContext } from \"@nextui-org/system\";\nimport { table } from \"@nextui-org/theme\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { clsx, objectToDeps } from \"@nextui-org/shared-utils\";\nimport { useMemo } from \"react\";\nfunction useTable(originalProps) {\n  var _a;\n  const globalContext = useProviderContext();\n  const [props, variantProps] = mapPropsVariants(originalProps, table.variantKeys);\n  const {\n    ref,\n    as,\n    baseRef,\n    children,\n    className,\n    classNames,\n    layoutNode,\n    removeWrapper = false,\n    disableAnimation = (_a = globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _a : false,\n    selectionMode = \"none\",\n    topContentPlacement = \"inside\",\n    bottomContentPlacement = \"inside\",\n    selectionBehavior = selectionMode === \"none\" ? null : \"toggle\",\n    disabledBehavior = \"selection\",\n    showSelectionCheckboxes = selectionMode === \"multiple\" && selectionBehavior !== \"replace\",\n    BaseComponent = \"div\",\n    checkboxesProps,\n    topContent,\n    bottomContent,\n    onRowAction,\n    onCellAction,\n    ...otherProps\n  } = props;\n  const Component = as || \"table\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const domBaseRef = useDOMRef(baseRef);\n  const state = useTableState({\n    ...originalProps,\n    children,\n    showSelectionCheckboxes\n  });\n  const {\n    collection\n  } = state;\n  const {\n    gridProps\n  } = useReactAriaTable({\n    ...originalProps,\n    layout: layoutNode\n  }, state, domRef);\n  const isSelectable = selectionMode !== \"none\";\n  const isMultiSelectable = selectionMode === \"multiple\";\n  const slots = useMemo(() => table({\n    ...variantProps,\n    isSelectable,\n    isMultiSelectable\n  }), [objectToDeps(variantProps), isSelectable, isMultiSelectable]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const values = useMemo(() => {\n    var _a2;\n    return {\n      state,\n      slots,\n      isSelectable,\n      collection,\n      classNames,\n      color: originalProps == null ? void 0 : originalProps.color,\n      disableAnimation,\n      checkboxesProps,\n      isHeaderSticky: (_a2 = originalProps == null ? void 0 : originalProps.isHeaderSticky) != null ? _a2 : false,\n      selectionMode,\n      selectionBehavior,\n      disabledBehavior,\n      showSelectionCheckboxes,\n      onRowAction,\n      onCellAction\n    };\n  }, [slots, state, collection, isSelectable, classNames, selectionMode, selectionBehavior, checkboxesProps, disabledBehavior, disableAnimation, showSelectionCheckboxes, originalProps == null ? void 0 : originalProps.color, originalProps == null ? void 0 : originalProps.isHeaderSticky, onRowAction, onCellAction]);\n  const getBaseProps = useCallback(props2 => ({\n    ...props2,\n    ref: domBaseRef,\n    className: slots.base({\n      class: clsx(baseStyles, props2 == null ? void 0 : props2.className)\n    })\n  }), [baseStyles, slots]);\n  const getWrapperProps = useCallback(props2 => ({\n    ...props2,\n    ref: domBaseRef,\n    className: slots.wrapper({\n      class: clsx(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className)\n    })\n  }), [classNames == null ? void 0 : classNames.wrapper, slots]);\n  const getTableProps = useCallback(props2 => ({\n    ...mergeProps(gridProps, filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    }), props2),\n    onKeyDownCapture: void 0,\n    ref: domRef,\n    className: slots.table({\n      class: clsx(classNames == null ? void 0 : classNames.table, props2 == null ? void 0 : props2.className)\n    })\n  }), [classNames == null ? void 0 : classNames.table, shouldFilterDOMProps, slots, gridProps, otherProps]);\n  return {\n    BaseComponent,\n    Component,\n    children,\n    state,\n    collection,\n    values,\n    topContent,\n    bottomContent,\n    removeWrapper,\n    topContentPlacement,\n    bottomContentPlacement,\n    getBaseProps,\n    getWrapperProps,\n    getTableProps\n  };\n}\nexport { useTable };","map":{"version":3,"names":["useCallback","useTableState","useTable","useReactAriaTable","mapPropsVariants","useProviderContext","table","useDOMRef","filterDOMProps","mergeProps","clsx","objectToDeps","useMemo","originalProps","_a","globalContext","props","variantProps","variantKeys","ref","as","baseRef","children","className","classNames","layoutNode","removeWrapper","disableAnimation","selectionMode","topContentPlacement","bottomContentPlacement","selectionBehavior","disabledBehavior","showSelectionCheckboxes","BaseComponent","checkboxesProps","topContent","bottomContent","onRowAction","onCellAction","otherProps","Component","shouldFilterDOMProps","domRef","domBaseRef","state","collection","gridProps","layout","isSelectable","isMultiSelectable","slots","baseStyles","base","values","_a2","color","isHeaderSticky","getBaseProps","props2","class","getWrapperProps","wrapper","getTableProps","enabled","onKeyDownCapture"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@nextui-org/table/dist/chunk-EQH6X4ZB.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-table.ts\nimport { useCallback } from \"react\";\nimport { useTableState } from \"@react-stately/table\";\nimport { useTable as useReactAriaTable } from \"@react-aria/table\";\nimport {\n  mapPropsVariants,\n  useProviderContext\n} from \"@nextui-org/system\";\nimport { table } from \"@nextui-org/theme\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { clsx, objectToDeps } from \"@nextui-org/shared-utils\";\nimport { useMemo } from \"react\";\nfunction useTable(originalProps) {\n  var _a;\n  const globalContext = useProviderContext();\n  const [props, variantProps] = mapPropsVariants(originalProps, table.variantKeys);\n  const {\n    ref,\n    as,\n    baseRef,\n    children,\n    className,\n    classNames,\n    layoutNode,\n    removeWrapper = false,\n    disableAnimation = (_a = globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _a : false,\n    selectionMode = \"none\",\n    topContentPlacement = \"inside\",\n    bottomContentPlacement = \"inside\",\n    selectionBehavior = selectionMode === \"none\" ? null : \"toggle\",\n    disabledBehavior = \"selection\",\n    showSelectionCheckboxes = selectionMode === \"multiple\" && selectionBehavior !== \"replace\",\n    BaseComponent = \"div\",\n    checkboxesProps,\n    topContent,\n    bottomContent,\n    onRowAction,\n    onCellAction,\n    ...otherProps\n  } = props;\n  const Component = as || \"table\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const domBaseRef = useDOMRef(baseRef);\n  const state = useTableState({\n    ...originalProps,\n    children,\n    showSelectionCheckboxes\n  });\n  const { collection } = state;\n  const { gridProps } = useReactAriaTable({ ...originalProps, layout: layoutNode }, state, domRef);\n  const isSelectable = selectionMode !== \"none\";\n  const isMultiSelectable = selectionMode === \"multiple\";\n  const slots = useMemo(\n    () => table({\n      ...variantProps,\n      isSelectable,\n      isMultiSelectable\n    }),\n    [objectToDeps(variantProps), isSelectable, isMultiSelectable]\n  );\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const values = useMemo(\n    () => {\n      var _a2;\n      return {\n        state,\n        slots,\n        isSelectable,\n        collection,\n        classNames,\n        color: originalProps == null ? void 0 : originalProps.color,\n        disableAnimation,\n        checkboxesProps,\n        isHeaderSticky: (_a2 = originalProps == null ? void 0 : originalProps.isHeaderSticky) != null ? _a2 : false,\n        selectionMode,\n        selectionBehavior,\n        disabledBehavior,\n        showSelectionCheckboxes,\n        onRowAction,\n        onCellAction\n      };\n    },\n    [\n      slots,\n      state,\n      collection,\n      isSelectable,\n      classNames,\n      selectionMode,\n      selectionBehavior,\n      checkboxesProps,\n      disabledBehavior,\n      disableAnimation,\n      showSelectionCheckboxes,\n      originalProps == null ? void 0 : originalProps.color,\n      originalProps == null ? void 0 : originalProps.isHeaderSticky,\n      onRowAction,\n      onCellAction\n    ]\n  );\n  const getBaseProps = useCallback(\n    (props2) => ({\n      ...props2,\n      ref: domBaseRef,\n      className: slots.base({ class: clsx(baseStyles, props2 == null ? void 0 : props2.className) })\n    }),\n    [baseStyles, slots]\n  );\n  const getWrapperProps = useCallback(\n    (props2) => ({\n      ...props2,\n      ref: domBaseRef,\n      className: slots.wrapper({ class: clsx(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className) })\n    }),\n    [classNames == null ? void 0 : classNames.wrapper, slots]\n  );\n  const getTableProps = useCallback(\n    (props2) => ({\n      ...mergeProps(\n        gridProps,\n        filterDOMProps(otherProps, {\n          enabled: shouldFilterDOMProps\n        }),\n        props2\n      ),\n      onKeyDownCapture: void 0,\n      ref: domRef,\n      className: slots.table({ class: clsx(classNames == null ? void 0 : classNames.table, props2 == null ? void 0 : props2.className) })\n    }),\n    [classNames == null ? void 0 : classNames.table, shouldFilterDOMProps, slots, gridProps, otherProps]\n  );\n  return {\n    BaseComponent,\n    Component,\n    children,\n    state,\n    collection,\n    values,\n    topContent,\n    bottomContent,\n    removeWrapper,\n    topContentPlacement,\n    bottomContentPlacement,\n    getBaseProps,\n    getWrapperProps,\n    getTableProps\n  };\n}\n\nexport {\n  useTable\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}