{"ast":null,"code":"import $9UXlH$intlmessageformat from \"intl-messageformat\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $972eb555d604f491$export$526ebc05ff964723 {\n  format(key, variables) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      message = new (0, $9UXlH$intlmessageformat)(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy;\n    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {\n      acc[key] = variables[key] == null ? false : variables[key];\n      return acc;\n    }, {});\n    return message.format(varCopy);\n  }\n  constructor(locale, messages) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n}\nexport { $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"names":["$972eb555d604f491$export$526ebc05ff964723","format","key","variables","message","cache","msg","messages","getStringForLocale","locale","Error","$9UXlH$intlmessageformat","varCopy","Object","keys","reduce","acc","constructor"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@internationalized/message/dist/packages/@internationalized/message/src/MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;AAmBO,MAAMA,yCAAA;EAWXC,OAAiBC,GAAW,EAAEC,SAA6G,EAAE;IAC3I,IAAIC,OAAA,GAAU,IAAI,CAACC,KAAK,CAACH,GAAA,CAAI;IAC7B,IAAI,CAACE,OAAA,EAAS;MACZ,IAAIE,GAAA,GAAM,IAAI,CAACC,QAAQ,CAACC,kBAAkB,CAACN,GAAA,EAAK,IAAI,CAACO,MAAM;MAC3D,IAAI,CAACH,GAAA,EACH,MAAM,IAAII,KAAA,CAAM,+BAA+BR,GAAA,OAAU,IAAI,CAACO,MAAM,SAAS;MAG/EL,OAAA,GAAU,KAAI,GAAAO,wBAAgB,EAAEL,GAAA,EAAK,IAAI,CAACG,MAAM;MAChD,IAAI,CAACJ,KAAK,CAACH,GAAA,CAAI,GAAGE,OAAA;IACpB;IACA,IAAIQ,OAAA;IACJ,IAAIT,SAAA,EACFS,OAAA,GAAUC,MAAA,CAAOC,IAAI,CAACX,SAAA,EAAWY,MAAM,CAAC,CAACC,GAAA,EAAKd,GAAA;MAC5Cc,GAAG,CAACd,GAAA,CAAI,GAAGC,SAAS,CAACD,GAAA,CAAI,IAAI,OAAO,QAAQC,SAAS,CAACD,GAAA,CAAI;MAC1D,OAAOc,GAAA;IACT,GAAG,CAAC;IAGN,OAAOZ,OAAA,CAAQH,MAAM,CAACW,OAAA;EACxB;EA1BAK,YAAYR,MAAc,EAAEF,QAA2B,EAAE;IACvD,IAAI,CAACE,MAAM,GAAGA,MAAA;IACd,IAAI,CAACF,QAAQ,GAAGA,QAAA;IAChB,IAAI,CAACF,KAAK,GAAG,CAAC;EAChB;AAuBF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}