{"ast":null,"code":"\"use client\";\n\n// src/use-card.ts\nimport { card } from \"@nextui-org/theme\";\nimport { useCallback, useMemo } from \"react\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport { mapPropsVariants, useProviderContext } from \"@nextui-org/system\";\nimport { clsx, dataAttr, objectToDeps } from \"@nextui-org/shared-utils\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useRipple } from \"@nextui-org/ripple\";\nfunction useCard(originalProps) {\n  var _a, _b, _c, _d;\n  const globalContext = useProviderContext();\n  const [props, variantProps] = mapPropsVariants(originalProps, card.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    onClick,\n    onPress,\n    autoFocus,\n    className,\n    classNames,\n    allowTextSelectionOnPress = true,\n    ...otherProps\n  } = props;\n  const domRef = useDOMRef(ref);\n  const Component = as || (originalProps.isPressable ? \"button\" : \"div\");\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const disableAnimation = (_b = (_a = originalProps.disableAnimation) != null ? _a : globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _b : false;\n  const disableRipple = (_d = (_c = originalProps.disableRipple) != null ? _c : globalContext == null ? void 0 : globalContext.disableRipple) != null ? _d : false;\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const {\n    onClick: onRippleClickHandler,\n    onClear: onClearRipple,\n    ripples\n  } = useRipple();\n  const handleClick = e => {\n    if (!disableAnimation && !disableRipple && domRef.current) {\n      onRippleClickHandler(e);\n    }\n  };\n  const {\n    buttonProps,\n    isPressed\n  } = useAriaButton({\n    onPress,\n    elementType: as,\n    isDisabled: !originalProps.isPressable,\n    onClick: chain(onClick, handleClick),\n    allowTextSelectionOnPress,\n    ...otherProps\n  }, domRef);\n  const {\n    hoverProps,\n    isHovered\n  } = useHover({\n    isDisabled: !originalProps.isHoverable,\n    ...otherProps\n  });\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(() => card({\n    ...variantProps,\n    disableAnimation\n  }), [objectToDeps(variantProps), disableAnimation]);\n  const context = useMemo(() => ({\n    slots,\n    classNames,\n    disableAnimation,\n    isDisabled: originalProps.isDisabled,\n    isFooterBlurred: originalProps.isFooterBlurred,\n    fullWidth: originalProps.fullWidth\n  }), [slots, classNames, originalProps.isDisabled, originalProps.isFooterBlurred, disableAnimation, originalProps.fullWidth]);\n  const getCardProps = useCallback((props2 = {}) => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      }),\n      tabIndex: originalProps.isPressable ? 0 : -1,\n      \"data-hover\": dataAttr(isHovered),\n      \"data-pressed\": dataAttr(isPressed),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      \"data-disabled\": dataAttr(originalProps.isDisabled),\n      ...mergeProps(originalProps.isPressable ? {\n        ...buttonProps,\n        ...focusProps,\n        role: \"button\"\n      } : {}, originalProps.isHoverable ? hoverProps : {}, filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }), filterDOMProps(props2))\n    };\n  }, [domRef, slots, baseStyles, shouldFilterDOMProps, originalProps.isPressable, originalProps.isHoverable, originalProps.isDisabled, isHovered, isPressed, isFocusVisible, buttonProps, focusProps, hoverProps, otherProps]);\n  const getRippleProps = useCallback(() => ({\n    ripples,\n    onClear: onClearRipple\n  }), [ripples, onClearRipple]);\n  return {\n    context,\n    domRef,\n    Component,\n    classNames,\n    children,\n    isHovered,\n    isPressed,\n    disableAnimation,\n    isPressable: originalProps.isPressable,\n    isHoverable: originalProps.isHoverable,\n    disableRipple,\n    handleClick,\n    isFocusVisible,\n    getCardProps,\n    getRippleProps\n  };\n}\nexport { useCard };","map":{"version":3,"names":["card","useCallback","useMemo","chain","mergeProps","useFocusRing","useHover","useAriaButton","mapPropsVariants","useProviderContext","clsx","dataAttr","objectToDeps","filterDOMProps","useDOMRef","useRipple","useCard","originalProps","_a","_b","_c","_d","globalContext","props","variantProps","variantKeys","ref","as","children","onClick","onPress","autoFocus","className","classNames","allowTextSelectionOnPress","otherProps","domRef","Component","isPressable","shouldFilterDOMProps","disableAnimation","disableRipple","baseStyles","base","onRippleClickHandler","onClear","onClearRipple","ripples","handleClick","e","current","buttonProps","isPressed","elementType","isDisabled","hoverProps","isHovered","isHoverable","isFocusVisible","isFocused","focusProps","slots","context","isFooterBlurred","fullWidth","getCardProps","props2","class","tabIndex","role","enabled","getRippleProps"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@nextui-org/card/dist/chunk-PA2HN3GN.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-card.ts\nimport { card } from \"@nextui-org/theme\";\nimport { useCallback, useMemo } from \"react\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useHover } from \"@react-aria/interactions\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport {\n  mapPropsVariants,\n  useProviderContext\n} from \"@nextui-org/system\";\nimport { clsx, dataAttr, objectToDeps } from \"@nextui-org/shared-utils\";\nimport { filterDOMProps } from \"@nextui-org/react-utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useRipple } from \"@nextui-org/ripple\";\nfunction useCard(originalProps) {\n  var _a, _b, _c, _d;\n  const globalContext = useProviderContext();\n  const [props, variantProps] = mapPropsVariants(originalProps, card.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    onClick,\n    onPress,\n    autoFocus,\n    className,\n    classNames,\n    allowTextSelectionOnPress = true,\n    ...otherProps\n  } = props;\n  const domRef = useDOMRef(ref);\n  const Component = as || (originalProps.isPressable ? \"button\" : \"div\");\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const disableAnimation = (_b = (_a = originalProps.disableAnimation) != null ? _a : globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _b : false;\n  const disableRipple = (_d = (_c = originalProps.disableRipple) != null ? _c : globalContext == null ? void 0 : globalContext.disableRipple) != null ? _d : false;\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const { onClick: onRippleClickHandler, onClear: onClearRipple, ripples } = useRipple();\n  const handleClick = (e) => {\n    if (!disableAnimation && !disableRipple && domRef.current) {\n      onRippleClickHandler(e);\n    }\n  };\n  const { buttonProps, isPressed } = useAriaButton(\n    {\n      onPress,\n      elementType: as,\n      isDisabled: !originalProps.isPressable,\n      onClick: chain(onClick, handleClick),\n      allowTextSelectionOnPress,\n      ...otherProps\n    },\n    domRef\n  );\n  const { hoverProps, isHovered } = useHover({\n    isDisabled: !originalProps.isHoverable,\n    ...otherProps\n  });\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(\n    () => card({\n      ...variantProps,\n      disableAnimation\n    }),\n    [objectToDeps(variantProps), disableAnimation]\n  );\n  const context = useMemo(\n    () => ({\n      slots,\n      classNames,\n      disableAnimation,\n      isDisabled: originalProps.isDisabled,\n      isFooterBlurred: originalProps.isFooterBlurred,\n      fullWidth: originalProps.fullWidth\n    }),\n    [\n      slots,\n      classNames,\n      originalProps.isDisabled,\n      originalProps.isFooterBlurred,\n      disableAnimation,\n      originalProps.fullWidth\n    ]\n  );\n  const getCardProps = useCallback(\n    (props2 = {}) => {\n      return {\n        ref: domRef,\n        className: slots.base({ class: baseStyles }),\n        tabIndex: originalProps.isPressable ? 0 : -1,\n        \"data-hover\": dataAttr(isHovered),\n        \"data-pressed\": dataAttr(isPressed),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-focus-visible\": dataAttr(isFocusVisible),\n        \"data-disabled\": dataAttr(originalProps.isDisabled),\n        ...mergeProps(\n          originalProps.isPressable ? { ...buttonProps, ...focusProps, role: \"button\" } : {},\n          originalProps.isHoverable ? hoverProps : {},\n          filterDOMProps(otherProps, {\n            enabled: shouldFilterDOMProps\n          }),\n          filterDOMProps(props2)\n        )\n      };\n    },\n    [\n      domRef,\n      slots,\n      baseStyles,\n      shouldFilterDOMProps,\n      originalProps.isPressable,\n      originalProps.isHoverable,\n      originalProps.isDisabled,\n      isHovered,\n      isPressed,\n      isFocusVisible,\n      buttonProps,\n      focusProps,\n      hoverProps,\n      otherProps\n    ]\n  );\n  const getRippleProps = useCallback(\n    () => ({ ripples, onClear: onClearRipple }),\n    [ripples, onClearRipple]\n  );\n  return {\n    context,\n    domRef,\n    Component,\n    classNames,\n    children,\n    isHovered,\n    isPressed,\n    disableAnimation,\n    isPressable: originalProps.isPressable,\n    isHoverable: originalProps.isHoverable,\n    disableRipple,\n    handleClick,\n    isFocusVisible,\n    getCardProps,\n    getRippleProps\n  };\n}\n\nexport {\n  useCard\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}