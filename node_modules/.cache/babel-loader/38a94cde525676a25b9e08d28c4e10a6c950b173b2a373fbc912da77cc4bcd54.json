{"ast":null,"code":"import { Point as $3041db3296945e6e$export$baf26146a414f24a } from \"./Point.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $60423f92c7f9ad87$export$c79fc6492f3af13d {\n  /**\n  * The maximum x-coordinate in the rectangle.\n  */\n  get maxX() {\n    return this.x + this.width;\n  }\n  /**\n  * The maximum y-coordinate in the rectangle.\n  */\n  get maxY() {\n    return this.y + this.height;\n  }\n  /**\n  * The area of the rectangle.\n  */\n  get area() {\n    return this.width * this.height;\n  }\n  /**\n  * The top left corner of the rectangle.\n  */\n  get topLeft() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);\n  }\n  /**\n  * The top right corner of the rectangle.\n  */\n  get topRight() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);\n  }\n  /**\n  * The bottom left corner of the rectangle.\n  */\n  get bottomLeft() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);\n  }\n  /**\n  * The bottom right corner of the rectangle.\n  */\n  get bottomRight() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);\n  }\n  /**\n  * Returns whether this rectangle intersects another rectangle.\n  * @param rect - The rectangle to check.\n  */\n  intersects(rect) {\n    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n  }\n  /**\n  * Returns whether this rectangle fully contains another rectangle.\n  * @param rect - The rectangle to check.\n  */\n  containsRect(rect) {\n    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n  }\n  /**\n  * Returns whether the rectangle contains the given point.\n  * @param point - The point to check.\n  */\n  containsPoint(point) {\n    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n  }\n  /**\n  * Returns the first corner of this rectangle (from top to bottom, left to right)\n  * that is contained in the given rectangle, or null of the rectangles do not intersect.\n  * @param rect - The rectangle to check.\n  */\n  getCornerInRect(rect) {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) return key;\n    }\n    return null;\n  }\n  equals(rect) {\n    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n  }\n  pointEquals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n  sizeEquals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n  /**\n  * Returns the union of this Rect and another.\n  */\n  union(other) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width, height);\n  }\n  /**\n  * Returns the intersection of this Rect with another.\n  * If the rectangles do not intersect, an all zero Rect is returned.\n  */\n  intersection(other) {\n    if (!this.intersects(other)) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);\n  }\n  /**\n  * Returns a copy of this rectangle.\n  */\n  copy() {\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n  }\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n}\nexport { $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect };","map":{"version":3,"names":["$60423f92c7f9ad87$export$c79fc6492f3af13d","maxX","x","width","maxY","y","height","area","topLeft","$3041db3296945e6e$export$baf26146a414f24a","topRight","bottomLeft","bottomRight","intersects","rect","containsRect","containsPoint","point","getCornerInRect","key","equals","pointEquals","sizeEquals","size","union","other","Math","min","max","intersection","copy","constructor"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Rect.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns the union of this Rect and another.\n   */\n  union(other: Rect) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Returns the intersection of this Rect with another.\n   * If the rectangles do not intersect, an all zero Rect is returned.\n   */\n  intersection(other: Rect): Rect {\n    if (!this.intersects(other)) {\n      return new Rect(0, 0, 0, 0);\n    }\n\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new Rect(\n      x,\n      y,\n      Math.min(this.maxX, other.maxX) - x,\n      Math.min(this.maxY, other.maxY) - y\n    );\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}