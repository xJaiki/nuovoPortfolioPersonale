{"ast":null,"code":"import $4stjr$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { announce as $4stjr$announce } from \"@react-aria/live-announcer\";\nimport { useLocalizedStringFormatter as $4stjr$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useRef as $4stjr$useRef } from \"react\";\nimport { useUpdateEffect as $4stjr$useUpdateEffect } from \"@react-aria/utils\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $92599c3fd427b763$export$137e594ef3218a10(props, state) {\n  let {\n    getRowText = key => {\n      var _state_collection_getTextValue, _state_collection, _state_collection_getItem;\n      var _state_collection_getTextValue1;\n      return (_state_collection_getTextValue1 = (_state_collection_getTextValue = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue === void 0 ? void 0 : _state_collection_getTextValue.call(_state_collection, key)) !== null && _state_collection_getTextValue1 !== void 0 ? _state_collection_getTextValue1 : (_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.textValue;\n    }\n  } = props;\n  let stringFormatter = (0, $4stjr$useLocalizedStringFormatter)((0, $parcel$interopDefault($4stjr$intlStringsmodulejs)), '@react-aria/grid');\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = (0, $4stjr$useRef)(selection);\n  (0, $4stjr$useUpdateEffect)(() => {\n    var _lastSelection_current;\n    if (!state.selectionManager.isFocused) {\n      lastSelection.current = selection;\n      return;\n    }\n    let addedKeys = $92599c3fd427b763$var$diffSelection(selection, lastSelection.current);\n    let removedKeys = $92599c3fd427b763$var$diffSelection(lastSelection.current, selection);\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages = [];\n    if (state.selectionManager.selectedKeys.size === 1 && isReplace) {\n      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {\n        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);\n        if (currentSelectionText) messages.push(stringFormatter.format('selectedItem', {\n          item: currentSelectionText\n        }));\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let addedText = getRowText(addedKeys.keys().next().value);\n      if (addedText) messages.push(stringFormatter.format('selectedItem', {\n        item: addedText\n      }));\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      if (state.collection.getItem(removedKeys.keys().next().value)) {\n        let removedText = getRowText(removedKeys.keys().next().value);\n        if (removedText) messages.push(stringFormatter.format('deselectedItem', {\n          item: removedText\n        }));\n      }\n    }\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || ((_lastSelection_current = lastSelection.current) === null || _lastSelection_current === void 0 ? void 0 : _lastSelection_current.size) > 1) messages.push(selection === 'all' ? stringFormatter.format('selectedAll') : stringFormatter.format('selectedCount', {\n        count: selection.size\n      }));\n    }\n    if (messages.length > 0) (0, $4stjr$announce)(messages.join(' '));\n    lastSelection.current = selection;\n  }, [selection]);\n}\nfunction $92599c3fd427b763$var$diffSelection(a, b) {\n  let res = new Set();\n  if (a === 'all' || b === 'all') return res;\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n  return res;\n}\nexport { $92599c3fd427b763$export$137e594ef3218a10 as useGridSelectionAnnouncement };","map":{"version":3,"names":["$92599c3fd427b763$export$137e594ef3218a10","props","state","getRowText","key","_state_collection_getTextValue","_state_collection","_state_collection_getItem","_state_collection_getTextValue1","collection","getTextValue","call","getItem","textValue","stringFormatter","$4stjr$useLocalizedStringFormatter","$parcel$interopDefault","$4stjr$intlStringsmodulejs","selection","selectionManager","rawSelection","lastSelection","$4stjr$useRef","$4stjr$useUpdateEffect","_lastSelection_current","isFocused","current","addedKeys","$92599c3fd427b763$var$diffSelection","removedKeys","isReplace","selectionBehavior","messages","selectedKeys","size","keys","next","value","currentSelectionText","push","format","item","addedText","removedText","selectionMode","length","count","$4stjr$announce","join","a","b","res","Set","has","add"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/grid/dist/packages/@react-aria/grid/src/useGridSelectionAnnouncement.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {Collection, Key, Node, Selection} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {SelectionManager} from '@react-stately/selection';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useRef} from 'react';\nimport {useUpdateEffect} from '@react-aria/utils';\n\nexport interface GridSelectionAnnouncementProps {\n  /**\n   * A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.\n   * @default (key) => state.collection.getItem(key)?.textValue\n   */\n  getRowText?: (key: Key) => string\n}\n\ninterface GridSelectionState<T> {\n  /** A collection of items in the grid. */\n  collection: Collection<Node<T>>,\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\nexport function useGridSelectionAnnouncement<T>(props: GridSelectionAnnouncementProps, state: GridSelectionState<T>) {\n  let {\n    getRowText = (key) => state.collection.getTextValue?.(key) ?? state.collection.getItem(key)?.textValue\n  } = props;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = useRef(selection);\n  useUpdateEffect(() => {\n    if (!state.selectionManager.isFocused) {\n      lastSelection.current = selection;\n\n      return;\n    }\n\n    let addedKeys = diffSelection(selection, lastSelection.current);\n    let removedKeys = diffSelection(lastSelection.current, selection);\n\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages = [];\n\n    if ((state.selectionManager.selectedKeys.size === 1 && isReplace)) {\n      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {\n        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);\n        if (currentSelectionText) {\n          messages.push(stringFormatter.format('selectedItem', {item: currentSelectionText}));\n        }\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let addedText = getRowText(addedKeys.keys().next().value);\n      if (addedText) {\n        messages.push(stringFormatter.format('selectedItem', {item: addedText}));\n      }\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      if (state.collection.getItem(removedKeys.keys().next().value)) {\n        let removedText = getRowText(removedKeys.keys().next().value);\n        if (removedText) {\n          messages.push(stringFormatter.format('deselectedItem', {item: removedText}));\n        }\n      }\n    }\n\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || lastSelection.current?.size > 1) {\n        messages.push(selection === 'all'\n          ? stringFormatter.format('selectedAll')\n          : stringFormatter.format('selectedCount', {count: selection.size})\n        );\n      }\n    }\n\n    if (messages.length > 0) {\n      announce(messages.join(' '));\n    }\n\n    lastSelection.current = selection;\n  }, [selection]);\n}\n\nfunction diffSelection(a: Selection, b: Selection): Set<Key> {\n  let res = new Set<Key>();\n  if (a === 'all' || b === 'all') {\n    return res;\n  }\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}