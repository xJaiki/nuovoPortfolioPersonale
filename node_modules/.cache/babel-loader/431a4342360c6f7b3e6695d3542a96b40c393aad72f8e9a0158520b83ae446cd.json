{"ast":null,"code":"\"use client\";\n\n// src/use-modal.ts\nimport { useAriaModalOverlay } from \"@nextui-org/use-aria-modal-overlay\";\nimport { useCallback, useId, useRef, useState, useMemo } from \"react\";\nimport { modal } from \"@nextui-org/theme\";\nimport { mapPropsVariants, useProviderContext } from \"@nextui-org/system\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { clsx, dataAttr, objectToDeps } from \"@nextui-org/shared-utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { mergeRefs, mergeProps } from \"@react-aria/utils\";\nfunction useModal(originalProps) {\n  var _a, _b, _c;\n  const globalContext = useProviderContext();\n  const [props, variantProps] = mapPropsVariants(originalProps, modal.variantKeys);\n  const {\n    ref,\n    as,\n    className,\n    classNames,\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n    motionProps,\n    closeButton,\n    isDismissable = true,\n    hideCloseButton = false,\n    shouldBlockScroll = true,\n    portalContainer,\n    isKeyboardDismissDisabled = false,\n    onClose,\n    ...otherProps\n  } = props;\n  const Component = as || \"section\";\n  const domRef = useDOMRef(ref);\n  const closeButtonRef = useRef(null);\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const disableAnimation = (_b = (_a = originalProps.disableAnimation) != null ? _a : globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _b : false;\n  const dialogId = useId();\n  const headerId = useId();\n  const bodyId = useId();\n  const state = useOverlayTriggerState({\n    isOpen,\n    defaultOpen,\n    onOpenChange: isOpen2 => {\n      onOpenChange == null ? void 0 : onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  const {\n    modalProps,\n    underlayProps\n  } = useAriaModalOverlay({\n    isDismissable,\n    shouldBlockScroll,\n    isKeyboardDismissDisabled\n  }, state, domRef);\n  const {\n    buttonProps: closeButtonProps\n  } = useAriaButton({\n    onPress: state.close\n  }, closeButtonRef);\n  const {\n    isFocusVisible: isCloseButtonFocusVisible,\n    focusProps: closeButtonFocusProps\n  } = useFocusRing();\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const slots = useMemo(() => modal({\n    ...variantProps,\n    disableAnimation\n  }), [objectToDeps(variantProps), disableAnimation]);\n  const getDialogProps = (props2 = {}, ref2 = null) => ({\n    ref: mergeRefs(ref2, domRef),\n    ...mergeProps(modalProps, otherProps, props2),\n    className: slots.base({\n      class: clsx(baseStyles, props2.className)\n    }),\n    id: dialogId,\n    \"data-open\": dataAttr(state.isOpen),\n    \"data-dismissable\": dataAttr(isDismissable),\n    \"aria-modal\": dataAttr(true),\n    \"aria-labelledby\": headerMounted ? headerId : void 0,\n    \"aria-describedby\": bodyMounted ? bodyId : void 0\n  });\n  const getBackdropProps = useCallback((props2 = {}) => ({\n    className: slots.backdrop({\n      class: classNames == null ? void 0 : classNames.backdrop\n    }),\n    onClick: () => state.close(),\n    ...underlayProps,\n    ...props2\n  }), [slots, classNames, underlayProps]);\n  const getCloseButtonProps = () => {\n    return {\n      role: \"button\",\n      tabIndex: 0,\n      \"aria-label\": \"Close\",\n      \"data-focus-visible\": dataAttr(isCloseButtonFocusVisible),\n      className: slots.closeButton({\n        class: classNames == null ? void 0 : classNames.closeButton\n      }),\n      ...mergeProps(closeButtonProps, closeButtonFocusProps)\n    };\n  };\n  return {\n    Component,\n    slots,\n    domRef,\n    headerId,\n    bodyId,\n    motionProps,\n    classNames,\n    isDismissable,\n    closeButton,\n    hideCloseButton,\n    portalContainer,\n    shouldBlockScroll,\n    backdrop: (_c = originalProps.backdrop) != null ? _c : \"opaque\",\n    isOpen: state.isOpen,\n    onClose: state.close,\n    disableAnimation,\n    setBodyMounted,\n    setHeaderMounted,\n    getDialogProps,\n    getBackdropProps,\n    getCloseButtonProps\n  };\n}\nexport { useModal };","map":{"version":3,"names":["useAriaModalOverlay","useCallback","useId","useRef","useState","useMemo","modal","mapPropsVariants","useProviderContext","useAriaButton","useFocusRing","clsx","dataAttr","objectToDeps","useDOMRef","useOverlayTriggerState","mergeRefs","mergeProps","useModal","originalProps","_a","_b","_c","globalContext","props","variantProps","variantKeys","ref","as","className","classNames","isOpen","defaultOpen","onOpenChange","motionProps","closeButton","isDismissable","hideCloseButton","shouldBlockScroll","portalContainer","isKeyboardDismissDisabled","onClose","otherProps","Component","domRef","closeButtonRef","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","disableAnimation","dialogId","headerId","bodyId","state","isOpen2","modalProps","underlayProps","buttonProps","closeButtonProps","onPress","close","isFocusVisible","isCloseButtonFocusVisible","focusProps","closeButtonFocusProps","baseStyles","base","slots","getDialogProps","props2","ref2","class","id","getBackdropProps","backdrop","onClick","getCloseButtonProps","role","tabIndex"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@nextui-org/modal/dist/chunk-I4YDOO25.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-modal.ts\nimport { useAriaModalOverlay } from \"@nextui-org/use-aria-modal-overlay\";\nimport { useCallback, useId, useRef, useState, useMemo } from \"react\";\nimport { modal } from \"@nextui-org/theme\";\nimport {\n  mapPropsVariants,\n  useProviderContext\n} from \"@nextui-org/system\";\nimport { useAriaButton } from \"@nextui-org/use-aria-button\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { clsx, dataAttr, objectToDeps } from \"@nextui-org/shared-utils\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { mergeRefs, mergeProps } from \"@react-aria/utils\";\nfunction useModal(originalProps) {\n  var _a, _b, _c;\n  const globalContext = useProviderContext();\n  const [props, variantProps] = mapPropsVariants(originalProps, modal.variantKeys);\n  const {\n    ref,\n    as,\n    className,\n    classNames,\n    isOpen,\n    defaultOpen,\n    onOpenChange,\n    motionProps,\n    closeButton,\n    isDismissable = true,\n    hideCloseButton = false,\n    shouldBlockScroll = true,\n    portalContainer,\n    isKeyboardDismissDisabled = false,\n    onClose,\n    ...otherProps\n  } = props;\n  const Component = as || \"section\";\n  const domRef = useDOMRef(ref);\n  const closeButtonRef = useRef(null);\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const disableAnimation = (_b = (_a = originalProps.disableAnimation) != null ? _a : globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _b : false;\n  const dialogId = useId();\n  const headerId = useId();\n  const bodyId = useId();\n  const state = useOverlayTriggerState({\n    isOpen,\n    defaultOpen,\n    onOpenChange: (isOpen2) => {\n      onOpenChange == null ? void 0 : onOpenChange(isOpen2);\n      if (!isOpen2) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  });\n  const { modalProps, underlayProps } = useAriaModalOverlay(\n    {\n      isDismissable,\n      shouldBlockScroll,\n      isKeyboardDismissDisabled\n    },\n    state,\n    domRef\n  );\n  const { buttonProps: closeButtonProps } = useAriaButton({ onPress: state.close }, closeButtonRef);\n  const { isFocusVisible: isCloseButtonFocusVisible, focusProps: closeButtonFocusProps } = useFocusRing();\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const slots = useMemo(\n    () => modal({\n      ...variantProps,\n      disableAnimation\n    }),\n    [objectToDeps(variantProps), disableAnimation]\n  );\n  const getDialogProps = (props2 = {}, ref2 = null) => ({\n    ref: mergeRefs(ref2, domRef),\n    ...mergeProps(modalProps, otherProps, props2),\n    className: slots.base({ class: clsx(baseStyles, props2.className) }),\n    id: dialogId,\n    \"data-open\": dataAttr(state.isOpen),\n    \"data-dismissable\": dataAttr(isDismissable),\n    \"aria-modal\": dataAttr(true),\n    \"aria-labelledby\": headerMounted ? headerId : void 0,\n    \"aria-describedby\": bodyMounted ? bodyId : void 0\n  });\n  const getBackdropProps = useCallback(\n    (props2 = {}) => ({\n      className: slots.backdrop({ class: classNames == null ? void 0 : classNames.backdrop }),\n      onClick: () => state.close(),\n      ...underlayProps,\n      ...props2\n    }),\n    [slots, classNames, underlayProps]\n  );\n  const getCloseButtonProps = () => {\n    return {\n      role: \"button\",\n      tabIndex: 0,\n      \"aria-label\": \"Close\",\n      \"data-focus-visible\": dataAttr(isCloseButtonFocusVisible),\n      className: slots.closeButton({ class: classNames == null ? void 0 : classNames.closeButton }),\n      ...mergeProps(closeButtonProps, closeButtonFocusProps)\n    };\n  };\n  return {\n    Component,\n    slots,\n    domRef,\n    headerId,\n    bodyId,\n    motionProps,\n    classNames,\n    isDismissable,\n    closeButton,\n    hideCloseButton,\n    portalContainer,\n    shouldBlockScroll,\n    backdrop: (_c = originalProps.backdrop) != null ? _c : \"opaque\",\n    isOpen: state.isOpen,\n    onClose: state.close,\n    disableAnimation,\n    setBodyMounted,\n    setHeaderMounted,\n    getDialogProps,\n    getBackdropProps,\n    getCloseButtonProps\n  };\n}\n\nexport {\n  useModal\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}