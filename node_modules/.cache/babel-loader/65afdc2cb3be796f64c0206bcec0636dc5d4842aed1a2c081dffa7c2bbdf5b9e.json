{"ast":null,"code":"import { tableNestedRows as $4ns2c$tableNestedRows } from \"@react-stately/flags\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $f917ee10f4c32dab$export$1b95a7d2d517b841(props, state, ref) {\n  let {\n    node: node,\n    isVirtualized: isVirtualized\n  } = props;\n  let rowProps = {\n    role: 'row'\n  };\n  if (isVirtualized && !((0, $4ns2c$tableNestedRows)() && 'expandedKeys' in state)) rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based\n  return {\n    rowProps: rowProps\n  };\n}\nexport { $f917ee10f4c32dab$export$1b95a7d2d517b841 as useTableHeaderRow };","map":{"version":3,"names":["$f917ee10f4c32dab$export$1b95a7d2d517b841","props","state","ref","node","isVirtualized","rowProps","role","$4ns2c$tableNestedRows","index"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/table/dist/packages/@react-aria/table/src/useTableHeaderRow.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {GridRowProps} from '@react-aria/grid';\nimport {RefObject} from 'react';\nimport {tableNestedRows} from '@react-stately/flags';\nimport {TableState} from '@react-stately/table';\n\nexport interface TableHeaderRowAria {\n  /** Props for the grid row element. */\n  rowProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a header row in a table.\n * @param props - Props for the row.\n * @param state - State of the table, as returned by `useTableState`.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function useTableHeaderRow<T>(props: GridRowProps<T>, state: TableState<T>, ref: RefObject<Element>): TableHeaderRowAria {\n  let {node, isVirtualized} = props;\n  let rowProps = {\n    role: 'row'\n  };\n\n  if (isVirtualized && !(tableNestedRows() && 'expandedKeys' in state)) {\n    rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based\n  }\n\n  return {\n    rowProps\n  };\n}\n"],"mappings":";;AAAA;;;;;;;;;;;AA6BO,SAASA,0CAAqBC,KAAsB,EAAEC,KAAoB,EAAEC,GAAuB;EACxG,IAAI;IAAAC,IAAA,EAACA,IAAI;IAAAC,aAAA,EAAEA;EAAa,CAAC,GAAGJ,KAAA;EAC5B,IAAIK,QAAA,GAAW;IACbC,IAAA,EAAM;EACR;EAEA,IAAIF,aAAA,IAAiB,EAAE,IAAAG,sBAAc,OAAO,kBAAkBN,KAAI,GAChEI,QAAQ,CAAC,gBAAgB,GAAGF,IAAA,CAAKK,KAAK,GAAG,GAAG;EAG9C,OAAO;cACLH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}