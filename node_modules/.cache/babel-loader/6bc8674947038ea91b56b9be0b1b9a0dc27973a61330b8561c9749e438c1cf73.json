{"ast":null,"code":"import { getRowLabelledBy as $2140fb2337097f2d$export$85069b70317f543 } from \"./utils.mjs\";\nimport { getLastItem as $2K6sg$getLastItem } from \"@react-stately/collections\";\nimport { getSyntheticLinkProps as $2K6sg$getSyntheticLinkProps, mergeProps as $2K6sg$mergeProps } from \"@react-aria/utils\";\nimport { useGridRow as $2K6sg$useGridRow } from \"@react-aria/grid\";\nimport { tableNestedRows as $2K6sg$tableNestedRows } from \"@react-stately/flags\";\nimport { useLocale as $2K6sg$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $b2db214c022798eb$var$EXPANSION_KEYS = {\n  expand: {\n    ltr: 'ArrowRight',\n    rtl: 'ArrowLeft'\n  },\n  'collapse': {\n    ltr: 'ArrowLeft',\n    rtl: 'ArrowRight'\n  }\n};\nfunction $b2db214c022798eb$export$7f2f6ae19e707aa5(props, state, ref) {\n  let {\n    node: node,\n    isVirtualized: isVirtualized\n  } = props;\n  let {\n    rowProps: rowProps,\n    ...states\n  } = (0, $2K6sg$useGridRow)(props, state, ref);\n  let {\n    direction: direction\n  } = (0, $2K6sg$useLocale)();\n  if (isVirtualized && !((0, $2K6sg$tableNestedRows)() && 'expandedKeys' in state)) rowProps['aria-rowindex'] = node.index + 1 + state.collection.headerRows.length; // aria-rowindex is 1 based\n  else delete rowProps['aria-rowindex'];\n  let treeGridRowProps = {};\n  if ((0, $2K6sg$tableNestedRows)() && 'expandedKeys' in state) {\n    let treeNode = state.keyMap.get(node.key);\n    if (treeNode != null) {\n      var _treeNode_props, _treeNode_props_children, _treeNode_props1;\n      let hasChildRows = ((_treeNode_props = treeNode.props) === null || _treeNode_props === void 0 ? void 0 : _treeNode_props.UNSTABLE_childItems) || ((_treeNode_props1 = treeNode.props) === null || _treeNode_props1 === void 0 ? void 0 : (_treeNode_props_children = _treeNode_props1.children) === null || _treeNode_props_children === void 0 ? void 0 : _treeNode_props_children.length) > state.userColumnCount;\n      treeGridRowProps = {\n        onKeyDown: e => {\n          if (e.key === $b2db214c022798eb$var$EXPANSION_KEYS['expand'][direction] && state.selectionManager.focusedKey === treeNode.key && hasChildRows && state.expandedKeys !== 'all' && !state.expandedKeys.has(treeNode.key)) {\n            state.toggleKey(treeNode.key);\n            e.stopPropagation();\n          } else if (e.key === $b2db214c022798eb$var$EXPANSION_KEYS['collapse'][direction] && state.selectionManager.focusedKey === treeNode.key && hasChildRows && (state.expandedKeys === 'all' || state.expandedKeys.has(treeNode.key))) {\n            state.toggleKey(treeNode.key);\n            e.stopPropagation();\n          }\n        },\n        'aria-expanded': hasChildRows ? state.expandedKeys === 'all' || state.expandedKeys.has(node.key) : undefined,\n        'aria-level': treeNode.level,\n        'aria-posinset': treeNode.indexOfType + 1,\n        'aria-setsize': treeNode.level > 1 ? (0, $2K6sg$getLastItem)(state.keyMap.get(treeNode === null || treeNode === void 0 ? void 0 : treeNode.parentKey).childNodes).indexOfType + 1 : (0, $2K6sg$getLastItem)(state.keyMap.get(state.collection.body.key).childNodes).indexOfType + 1\n      };\n    }\n  }\n  let linkProps = states.hasAction ? (0, $2K6sg$getSyntheticLinkProps)(node.props) : {};\n  return {\n    rowProps: {\n      ...(0, $2K6sg$mergeProps)(rowProps, treeGridRowProps, linkProps),\n      'aria-labelledby': (0, $2140fb2337097f2d$export$85069b70317f543)(state, node.key)\n    },\n    ...states\n  };\n}\nexport { $b2db214c022798eb$export$7f2f6ae19e707aa5 as useTableRow };","map":{"version":3,"names":["$b2db214c022798eb$var$EXPANSION_KEYS","expand","ltr","rtl","$b2db214c022798eb$export$7f2f6ae19e707aa5","props","state","ref","node","isVirtualized","rowProps","states","$2K6sg$useGridRow","direction","$2K6sg$useLocale","$2K6sg$tableNestedRows","index","collection","headerRows","length","treeGridRowProps","treeNode","keyMap","get","key","_treeNode_props","_treeNode_props_children","_treeNode_props1","hasChildRows","UNSTABLE_childItems","children","userColumnCount","onKeyDown","e","selectionManager","focusedKey","expandedKeys","has","toggleKey","stopPropagation","undefined","level","indexOfType","$2K6sg$getLastItem","parentKey","childNodes","body","linkProps","hasAction","$2K6sg$getSyntheticLinkProps","$2K6sg$mergeProps","$2140fb2337097f2d$export$85069b70317f543"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@react-aria/table/dist/packages/@react-aria/table/src/useTableRow.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {getLastItem} from '@react-stately/collections';\nimport {getRowLabelledBy} from './utils';\nimport {getSyntheticLinkProps, mergeProps} from '@react-aria/utils';\nimport type {GridNode} from '@react-types/grid';\nimport {GridRowAria, GridRowProps, useGridRow} from '@react-aria/grid';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {TableCollection} from '@react-types/table';\nimport {tableNestedRows} from '@react-stately/flags';\nimport {TableState, TreeGridState} from '@react-stately/table';\nimport {useLocale} from '@react-aria/i18n';\n\nconst EXPANSION_KEYS = {\n  expand: {\n    ltr: 'ArrowRight',\n    rtl: 'ArrowLeft'\n  },\n  'collapse': {\n    ltr: 'ArrowLeft',\n    rtl: 'ArrowRight'\n  }\n};\n\n/**\n * Provides the behavior and accessibility implementation for a row in a table.\n * @param props - Props for the row.\n * @param state - State of the table, as returned by `useTableState`.\n */\nexport function useTableRow<T>(props: GridRowProps<T>, state: TableState<T> | TreeGridState<T>, ref: RefObject<FocusableElement>): GridRowAria {\n  let {node, isVirtualized} = props;\n  let {rowProps, ...states} = useGridRow<T, TableCollection<T>, TableState<T>>(props, state, ref);\n  let {direction} = useLocale();\n\n  if (isVirtualized && !(tableNestedRows() && 'expandedKeys' in state)) {\n    rowProps['aria-rowindex'] = node.index + 1 + state.collection.headerRows.length; // aria-rowindex is 1 based\n  } else {\n    delete rowProps['aria-rowindex'];\n  }\n\n  let treeGridRowProps: HTMLAttributes<HTMLElement> = {};\n  if (tableNestedRows() && 'expandedKeys' in state) {\n    let treeNode = state.keyMap.get(node.key);\n    if (treeNode != null) {\n      let hasChildRows = treeNode.props?.UNSTABLE_childItems || treeNode.props?.children?.length > state.userColumnCount;\n      treeGridRowProps = {\n        onKeyDown: (e) => {\n          if ((e.key === EXPANSION_KEYS['expand'][direction]) && state.selectionManager.focusedKey === treeNode.key && hasChildRows && state.expandedKeys !== 'all' && !state.expandedKeys.has(treeNode.key)) {\n            state.toggleKey(treeNode.key);\n            e.stopPropagation();\n          } else if ((e.key === EXPANSION_KEYS['collapse'][direction]) && state.selectionManager.focusedKey === treeNode.key && hasChildRows && (state.expandedKeys === 'all' || state.expandedKeys.has(treeNode.key))) {\n            state.toggleKey(treeNode.key);\n            e.stopPropagation();\n          }\n        },\n        'aria-expanded': hasChildRows ? state.expandedKeys === 'all' || state.expandedKeys.has(node.key) : undefined,\n        'aria-level': treeNode.level,\n        'aria-posinset': treeNode.indexOfType + 1,\n        'aria-setsize': treeNode.level > 1 ?\n          (getLastItem(state.keyMap.get(treeNode?.parentKey).childNodes) as GridNode<T>).indexOfType + 1 :\n          (getLastItem(state.keyMap.get(state.collection.body.key).childNodes) as GridNode<T>).indexOfType + 1\n      };\n    }\n  }\n\n  let linkProps = states.hasAction ? getSyntheticLinkProps(node.props) : {};\n  return {\n    rowProps: {\n      ...mergeProps(rowProps, treeGridRowProps, linkProps),\n      'aria-labelledby': getRowLabelledBy(state, node.key)\n    },\n    ...states\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}