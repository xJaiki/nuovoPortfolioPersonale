{"ast":null,"code":"import $jR5iF$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useLocale as $jR5iF$useLocale, useLocalizedStringDictionary as $jR5iF$useLocalizedStringDictionary } from \"@react-aria/i18n\";\nimport { useMemo as $jR5iF$useMemo } from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // @ts-ignore\n\nfunction $3aeceb3a64eb8358$export$d42c60378c8168f8() {\n  let {\n    locale: locale\n  } = (0, $jR5iF$useLocale)();\n  let dictionary = (0, $jR5iF$useLocalizedStringDictionary)((0, $parcel$interopDefault($jR5iF$intlStringsmodulejs)), '@react-aria/datepicker');\n  return (0, $jR5iF$useMemo)(() => {\n    // Try to use Intl.DisplayNames if possible. It may be supported in browsers, but not support the dateTimeField\n    // type as that was only added in v2. https://github.com/tc39/intl-displaynames-v2\n    try {\n      // @ts-ignore\n      return new Intl.DisplayNames(locale, {\n        type: 'dateTimeField'\n      });\n    } catch (err) {\n      return new $3aeceb3a64eb8358$var$DisplayNamesPolyfill(locale, dictionary);\n    }\n  }, [locale, dictionary]);\n}\nclass $3aeceb3a64eb8358$var$DisplayNamesPolyfill {\n  of(field) {\n    return this.dictionary.getStringForLocale(field, this.locale);\n  }\n  constructor(locale, dictionary) {\n    this.locale = locale;\n    this.dictionary = dictionary;\n  }\n}\nexport { $3aeceb3a64eb8358$export$d42c60378c8168f8 as useDisplayNames };","map":{"version":3,"names":["$3aeceb3a64eb8358$export$d42c60378c8168f8","locale","$jR5iF$useLocale","dictionary","$jR5iF$useLocalizedStringDictionary","$parcel$interopDefault","$jR5iF$intlStringsmodulejs","$jR5iF$useMemo","Intl","DisplayNames","type","err","$3aeceb3a64eb8358$var$DisplayNamesPolyfill","of","field","getStringForLocale","constructor"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/datepicker/dist/packages/@react-aria/datepicker/src/useDisplayNames.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {LocalizedStringDictionary} from '@internationalized/string';\nimport {useLocale, useLocalizedStringDictionary} from '@react-aria/i18n';\nimport {useMemo} from 'react';\n\ntype Field = Intl.DateTimeFormatPartTypes;\ninterface DisplayNames {\n  of(field: Field): string\n}\n\n/** @private */\nexport function useDisplayNames(): DisplayNames {\n  let {locale} = useLocale();\n  let dictionary = useLocalizedStringDictionary(intlMessages, '@react-aria/datepicker');\n  return useMemo(() => {\n    // Try to use Intl.DisplayNames if possible. It may be supported in browsers, but not support the dateTimeField\n    // type as that was only added in v2. https://github.com/tc39/intl-displaynames-v2\n    try {\n      // @ts-ignore\n      return new Intl.DisplayNames(locale, {type: 'dateTimeField'});\n    } catch (err) {\n      return new DisplayNamesPolyfill(locale, dictionary);\n    }\n  }, [locale, dictionary]);\n}\n\nclass DisplayNamesPolyfill implements DisplayNames {\n  private locale: string;\n  private dictionary: LocalizedStringDictionary<Field, string>;\n\n  constructor(locale: string, dictionary: LocalizedStringDictionary<Field, string>) {\n    this.locale = locale;\n    this.dictionary = dictionary;\n  }\n\n  of(field: Field): string {\n    return this.dictionary.getStringForLocale(field, this.locale);\n  }\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;GAAA,CAYA;;AAYO,SAASA,0CAAA;EACd,IAAI;IAAAC,MAAA,EAACA;EAAM,CAAC,GAAG,IAAAC,gBAAQ;EACvB,IAAIC,UAAA,GAAa,IAAAC,mCAA2B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAC5D,OAAO,IAAAC,cAAM,EAAE;IACb;IACA;IACA,IAAI;MACF;MACA,OAAO,IAAIC,IAAA,CAAKC,YAAY,CAACR,MAAA,EAAQ;QAACS,IAAA,EAAM;MAAe;IAC7D,EAAE,OAAOC,GAAA,EAAK;MACZ,OAAO,IAAIC,0CAAA,CAAqBX,MAAA,EAAQE,UAAA;IAC1C;EACF,GAAG,CAACF,MAAA,EAAQE,UAAA,CAAW;AACzB;AAEA,MAAMS,0CAAA;EASJC,GAAGC,KAAY,EAAU;IACvB,OAAO,IAAI,CAACX,UAAU,CAACY,kBAAkB,CAACD,KAAA,EAAO,IAAI,CAACb,MAAM;EAC9D;EAPAe,YAAYf,MAAc,EAAEE,UAAoD,EAAE;IAChF,IAAI,CAACF,MAAM,GAAGA,MAAA;IACd,IAAI,CAACE,UAAU,GAAGA,UAAA;EACpB;AAKF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}