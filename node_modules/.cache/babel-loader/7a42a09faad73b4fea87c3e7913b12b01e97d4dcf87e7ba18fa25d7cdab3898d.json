{"ast":null,"code":"import { GridKeyboardDelegate as $d1c300d9c497e402$export$de9feff04fda126e } from \"./GridKeyboardDelegate.mjs\";\nimport { gridMap as $1af922eb41e03c8f$export$e6235c0d09b995d0 } from \"./utils.mjs\";\nimport { useGridSelectionAnnouncement as $92599c3fd427b763$export$137e594ef3218a10 } from \"./useGridSelectionAnnouncement.mjs\";\nimport { useHighlightSelectionDescription as $5b9b5b5723db6ae1$export$be42ebdab07ae4c2 } from \"./useHighlightSelectionDescription.mjs\";\nimport { useId as $eV0xE$useId, filterDOMProps as $eV0xE$filterDOMProps, mergeProps as $eV0xE$mergeProps } from \"@react-aria/utils\";\nimport { useMemo as $eV0xE$useMemo, useCallback as $eV0xE$useCallback } from \"react\";\nimport { useCollator as $eV0xE$useCollator, useLocale as $eV0xE$useLocale } from \"@react-aria/i18n\";\nimport { useHasTabbableChild as $eV0xE$useHasTabbableChild } from \"@react-aria/focus\";\nimport { useSelectableCollection as $eV0xE$useSelectableCollection } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $83c6e2eafa584c67$export$f6b86a04e5d66d90(props, state, ref) {\n  let {\n    isVirtualized: isVirtualized,\n    keyboardDelegate: keyboardDelegate,\n    focusMode: focusMode,\n    scrollRef: scrollRef,\n    getRowText: getRowText,\n    onRowAction: onRowAction,\n    onCellAction: onCellAction\n  } = props;\n  let {\n    selectionManager: manager\n  } = state;\n  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = (0, $eV0xE$useCollator)({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let {\n    direction: direction\n  } = (0, $eV0xE$useLocale)();\n  let disabledBehavior = state.selectionManager.disabledBehavior;\n  let delegate = (0, $eV0xE$useMemo)(() => keyboardDelegate || new (0, $d1c300d9c497e402$export$de9feff04fda126e)({\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    disabledBehavior: disabledBehavior,\n    ref: ref,\n    direction: direction,\n    collator: collator,\n    focusMode: focusMode\n  }), [keyboardDelegate, state.collection, state.disabledKeys, disabledBehavior, ref, direction, collator, focusMode]);\n  let {\n    collectionProps: collectionProps\n  } = (0, $eV0xE$useSelectableCollection)({\n    ref: ref,\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    isVirtualized: isVirtualized,\n    scrollRef: scrollRef\n  });\n  let id = (0, $eV0xE$useId)(props.id);\n  (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).set(state, {\n    keyboardDelegate: delegate,\n    actions: {\n      onRowAction: onRowAction,\n      onCellAction: onCellAction\n    }\n  });\n  let descriptionProps = (0, $5b9b5b5723db6ae1$export$be42ebdab07ae4c2)({\n    selectionManager: manager,\n    hasItemActions: !!(onRowAction || onCellAction)\n  });\n  let domProps = (0, $eV0xE$filterDOMProps)(props, {\n    labelable: true\n  });\n  let onFocus = (0, $eV0xE$useCallback)(e => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);\n      return;\n    }\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) return;\n    manager.setFocused(true);\n  }, [manager]);\n  // Continue to track collection focused state even if keyboard navigation is disabled\n  let navDisabledHandlers = (0, $eV0xE$useMemo)(() => ({\n    onBlur: collectionProps.onBlur,\n    onFocus: onFocus\n  }), [onFocus, collectionProps.onBlur]);\n  let hasTabbableChild = (0, $eV0xE$useHasTabbableChild)(ref, {\n    isDisabled: state.collection.size !== 0\n  });\n  let gridProps = (0, $eV0xE$mergeProps)(domProps, {\n    role: 'grid',\n    id: id,\n    'aria-multiselectable': manager.selectionMode === 'multiple' ? 'true' : undefined\n  }, state.isKeyboardNavigationDisabled ? navDisabledHandlers : collectionProps,\n  // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.\n  state.collection.size === 0 && {\n    tabIndex: hasTabbableChild ? -1 : 0\n  }, descriptionProps);\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = state.collection.columnCount;\n  }\n  (0, $92599c3fd427b763$export$137e594ef3218a10)({\n    getRowText: getRowText\n  }, state);\n  return {\n    gridProps: gridProps\n  };\n}\nexport { $83c6e2eafa584c67$export$f6b86a04e5d66d90 as useGrid };","map":{"version":3,"names":["$83c6e2eafa584c67$export$f6b86a04e5d66d90","props","state","ref","isVirtualized","keyboardDelegate","focusMode","scrollRef","getRowText","onRowAction","onCellAction","selectionManager","manager","console","warn","collator","$eV0xE$useCollator","usage","sensitivity","direction","$eV0xE$useLocale","disabledBehavior","delegate","$eV0xE$useMemo","$d1c300d9c497e402$export$de9feff04fda126e","collection","disabledKeys","collectionProps","$eV0xE$useSelectableCollection","id","$eV0xE$useId","$1af922eb41e03c8f$export$e6235c0d09b995d0","set","actions","descriptionProps","$5b9b5b5723db6ae1$export$be42ebdab07ae4c2","hasItemActions","domProps","$eV0xE$filterDOMProps","labelable","onFocus","$eV0xE$useCallback","e","isFocused","currentTarget","contains","target","setFocused","navDisabledHandlers","onBlur","hasTabbableChild","$eV0xE$useHasTabbableChild","isDisabled","size","gridProps","$eV0xE$mergeProps","role","selectionMode","undefined","isKeyboardNavigationDisabled","tabIndex","columnCount","$92599c3fd427b763$export$137e594ef3218a10"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/grid/dist/packages/@react-aria/grid/src/useGrid.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, Key, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {GridCollection} from '@react-types/grid';\nimport {GridKeyboardDelegate} from './GridKeyboardDelegate';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {RefObject, useCallback, useMemo} from 'react';\nimport {useCollator, useLocale} from '@react-aria/i18n';\nimport {useGridSelectionAnnouncement} from './useGridSelectionAnnouncement';\nimport {useHasTabbableChild} from '@react-aria/focus';\nimport {useHighlightSelectionDescription} from './useHighlightSelectionDescription';\nimport {useSelectableCollection} from '@react-aria/selection';\n\nexport interface GridProps extends DOMProps, AriaLabelingProps {\n  /** Whether the grid uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether initial grid focus should be placed on the grid row or grid cell.\n   * @default 'row'\n   */\n  focusMode?: 'row' | 'cell',\n  /**\n   * A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.\n   * @default (key) => state.collection.getItem(key)?.textValue\n   */\n  getRowText?: (key: Key) => string,\n  /**\n   * The ref attached to the scrollable body. Used to provided automatic scrolling on item focus for non-virtualized grids.\n   */\n  scrollRef?: RefObject<HTMLElement>,\n  /** Handler that is called when a user performs an action on the row. */\n  onRowAction?: (key: Key) => void,\n  /** Handler that is called when a user performs an action on the cell. */\n  onCellAction?: (key: Key) => void\n}\n\nexport interface GridAria {\n  /** Props for the grid element. */\n  gridProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a grid component.\n * A grid displays data in one or more rows and columns and enables a user to navigate its contents via directional navigation keys.\n * @param props - Props for the grid.\n * @param state - State for the grid, as returned by `useGridState`.\n * @param ref - The ref attached to the grid element.\n */\nexport function useGrid<T>(props: GridProps, state: GridState<T, GridCollection<T>>, ref: RefObject<HTMLElement>): GridAria {\n  let {\n    isVirtualized,\n    keyboardDelegate,\n    focusMode,\n    scrollRef,\n    getRowText,\n    onRowAction,\n    onCellAction\n  } = props;\n  let {selectionManager: manager} = state;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let {direction} = useLocale();\n  let disabledBehavior = state.selectionManager.disabledBehavior;\n  let delegate = useMemo(() => keyboardDelegate || new GridKeyboardDelegate({\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    disabledBehavior,\n    ref,\n    direction,\n    collator,\n    focusMode\n  }), [keyboardDelegate, state.collection, state.disabledKeys, disabledBehavior, ref, direction, collator, focusMode]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    isVirtualized,\n    scrollRef\n  });\n\n  let id = useId(props.id);\n  gridMap.set(state, {keyboardDelegate: delegate, actions: {onRowAction, onCellAction}});\n\n  let descriptionProps = useHighlightSelectionDescription({\n    selectionManager: manager,\n    hasItemActions: !!(onRowAction || onCellAction)\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  let onFocus = useCallback((e) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n  }, [manager]);\n\n  // Continue to track collection focused state even if keyboard navigation is disabled\n  let navDisabledHandlers = useMemo(() => ({\n    onBlur: collectionProps.onBlur,\n    onFocus\n  }), [onFocus, collectionProps.onBlur]);\n\n  let hasTabbableChild = useHasTabbableChild(ref, {\n    isDisabled: state.collection.size !== 0\n  });\n\n  let gridProps: DOMAttributes = mergeProps(\n    domProps,\n    {\n      role: 'grid',\n      id,\n      'aria-multiselectable': manager.selectionMode === 'multiple' ? 'true' : undefined\n    },\n    state.isKeyboardNavigationDisabled ? navDisabledHandlers : collectionProps,\n    // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.\n    state.collection.size === 0 && {tabIndex: hasTabbableChild ? -1 : 0},\n    descriptionProps\n  );\n\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = state.collection.columnCount;\n  }\n\n  useGridSelectionAnnouncement({getRowText}, state);\n  return {\n    gridProps\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}