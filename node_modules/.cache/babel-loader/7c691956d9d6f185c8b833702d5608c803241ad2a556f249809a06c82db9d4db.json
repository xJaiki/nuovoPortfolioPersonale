{"ast":null,"code":"import { getRowLabelledBy as $2140fb2337097f2d$export$85069b70317f543 } from \"./utils.mjs\";\nimport $iIuaM$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useGridSelectionCheckbox as $iIuaM$useGridSelectionCheckbox } from \"@react-aria/grid\";\nimport { useLocalizedStringFormatter as $iIuaM$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $2a795c53a101c542$export$16ea7f650bd7c1bb(props, state) {\n  let {\n    key: key\n  } = props;\n  const {\n    checkboxProps: checkboxProps\n  } = (0, $iIuaM$useGridSelectionCheckbox)(props, state);\n  return {\n    checkboxProps: {\n      ...checkboxProps,\n      'aria-labelledby': `${checkboxProps.id} ${(0, $2140fb2337097f2d$export$85069b70317f543)(state, key)}`\n    }\n  };\n}\nfunction $2a795c53a101c542$export$1003db6a7e384b99(state) {\n  let {\n    isEmpty: isEmpty,\n    isSelectAll: isSelectAll,\n    selectionMode: selectionMode\n  } = state.selectionManager;\n  const stringFormatter = (0, $iIuaM$useLocalizedStringFormatter)((0, $parcel$interopDefault($iIuaM$intlStringsmodulejs)), '@react-aria/table');\n  return {\n    checkboxProps: {\n      'aria-label': stringFormatter.format(selectionMode === 'single' ? 'select' : 'selectAll'),\n      isSelected: isSelectAll,\n      isDisabled: selectionMode !== 'multiple' || state.collection.size === 0,\n      isIndeterminate: !isEmpty && !isSelectAll,\n      onChange: () => state.selectionManager.toggleSelectAll()\n    }\n  };\n}\nexport { $2a795c53a101c542$export$16ea7f650bd7c1bb as useTableSelectionCheckbox, $2a795c53a101c542$export$1003db6a7e384b99 as useTableSelectAllCheckbox };","map":{"version":3,"names":["$2a795c53a101c542$export$16ea7f650bd7c1bb","props","state","key","checkboxProps","$iIuaM$useGridSelectionCheckbox","id","$2140fb2337097f2d$export$85069b70317f543","$2a795c53a101c542$export$1003db6a7e384b99","isEmpty","isSelectAll","selectionMode","selectionManager","stringFormatter","$iIuaM$useLocalizedStringFormatter","$parcel$interopDefault","$iIuaM$intlStringsmodulejs","format","isSelected","isDisabled","collection","size","isIndeterminate","onChange","toggleSelectAll"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@react-aria/table/dist/packages/@react-aria/table/src/useTableSelectionCheckbox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {getRowLabelledBy} from './utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {Key} from '@react-types/shared';\nimport {TableState} from '@react-stately/table';\nimport {useGridSelectionCheckbox} from '@react-aria/grid';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaTableSelectionCheckboxProps {\n  /** A unique key for the checkbox. */\n  key: Key\n}\n\nexport interface TableSelectionCheckboxAria {\n  /** Props for the row selection checkbox element. */\n  checkboxProps: AriaCheckboxProps\n}\n\nexport interface TableSelectAllCheckboxAria {\n  /** Props for the select all checkbox element. */\n  checkboxProps: AriaCheckboxProps\n}\n\n/**\n * Provides the behavior and accessibility implementation for a selection checkbox in a table.\n * @param props - Props for the selection checkbox.\n * @param state - State of the table, as returned by `useTableState`.\n */\nexport function useTableSelectionCheckbox<T>(props: AriaTableSelectionCheckboxProps, state: TableState<T>): TableSelectionCheckboxAria {\n  let {key} = props;\n  const {checkboxProps} = useGridSelectionCheckbox(props, state);\n\n  return {\n    checkboxProps: {\n      ...checkboxProps,\n      'aria-labelledby': `${checkboxProps.id} ${getRowLabelledBy(state, key)}`\n    }\n  };\n}\n\n/**\n * Provides the behavior and accessibility implementation for the select all checkbox in a table.\n * @param props - Props for the select all checkbox.\n * @param state - State of the table, as returned by `useTableState`.\n */\nexport function useTableSelectAllCheckbox<T>(state: TableState<T>): TableSelectAllCheckboxAria {\n  let {isEmpty, isSelectAll, selectionMode} = state.selectionManager;\n  const stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/table');\n\n  return {\n    checkboxProps: {\n      'aria-label': stringFormatter.format(selectionMode === 'single' ? 'select' : 'selectAll'),\n      isSelected: isSelectAll,\n      isDisabled: selectionMode !== 'multiple' || state.collection.size === 0,\n      isIndeterminate: !isEmpty && !isSelectAll,\n      onChange: () => state.selectionManager.toggleSelectAll()\n    }\n  };\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AAyCO,SAASA,0CAA6BC,KAAsC,EAAEC,KAAoB;EACvG,IAAI;IAAAC,GAAA,EAACA;EAAG,CAAC,GAAGF,KAAA;EACZ,MAAM;IAAAG,aAAA,EAACA;EAAa,CAAC,GAAG,IAAAC,+BAAuB,EAAEJ,KAAA,EAAOC,KAAA;EAExD,OAAO;IACLE,aAAA,EAAe;MACb,GAAGA,aAAa;MAChB,mBAAmB,GAAGA,aAAA,CAAcE,EAAE,IAAI,IAAAC,wCAAe,EAAEL,KAAA,EAAOC,GAAA;IACpE;EACF;AACF;AAOO,SAASK,0CAA6BN,KAAoB;EAC/D,IAAI;IAAAO,OAAA,EAACA,OAAO;IAAAC,WAAA,EAAEA,WAAW;IAAAC,aAAA,EAAEA;EAAa,CAAC,GAAGT,KAAA,CAAMU,gBAAgB;EAClE,MAAMC,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAElE,OAAO;IACLZ,aAAA,EAAe;MACb,cAAcS,eAAA,CAAgBI,MAAM,CAACN,aAAA,KAAkB,WAAW,WAAW;MAC7EO,UAAA,EAAYR,WAAA;MACZS,UAAA,EAAYR,aAAA,KAAkB,cAAcT,KAAA,CAAMkB,UAAU,CAACC,IAAI,KAAK;MACtEC,eAAA,EAAiB,CAACb,OAAA,IAAW,CAACC,WAAA;MAC9Ba,QAAA,EAAUA,CAAA,KAAMrB,KAAA,CAAMU,gBAAgB,CAACY,eAAe;IACxD;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}