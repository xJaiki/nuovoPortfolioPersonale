{"ast":null,"code":"/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */const $5b160d28a433310d$var$localeSymbol = Symbol.for('react-aria.i18n.locale');\nconst $5b160d28a433310d$var$stringsSymbol = Symbol.for('react-aria.i18n.strings');\nlet $5b160d28a433310d$var$cachedGlobalStrings = undefined;\nclass $5b160d28a433310d$export$c17fa47878dc55b6 {\n  /** Returns a localized string for the given key and locale. */getStringForLocale(key, locale) {\n    let strings = this.getStringsForLocale(locale);\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n  /** Returns all localized strings for the given locale. */\n  getStringsForLocale(locale) {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n    return strings;\n  }\n  static getGlobalDictionaryForPackage(packageName) {\n    if (typeof window === 'undefined') return null;\n    let locale = window[$5b160d28a433310d$var$localeSymbol];\n    if ($5b160d28a433310d$var$cachedGlobalStrings === undefined) {\n      let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];\n      if (!globalStrings) return null;\n      $5b160d28a433310d$var$cachedGlobalStrings = {};\n      for (let pkg in globalStrings) $5b160d28a433310d$var$cachedGlobalStrings[pkg] = new $5b160d28a433310d$export$c17fa47878dc55b6({\n        [locale]: globalStrings[pkg]\n      }, locale);\n    }\n    let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];\n    if (!dictionary) throw new Error(`Strings for package \"${packageName}\" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);\n    return dictionary;\n  }\n  constructor(messages, defaultLocale = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n    this.strings = Object.fromEntries(Object.entries(messages).filter(([, v]) => v));\n    this.defaultLocale = defaultLocale;\n  }\n}\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = $5b160d28a433310d$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split('-')[0];\n}\nexport { $5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary };","map":{"version":3,"names":["$5b160d28a433310d$var$localeSymbol","Symbol","for","$5b160d28a433310d$var$stringsSymbol","$5b160d28a433310d$var$cachedGlobalStrings","undefined","$5b160d28a433310d$export$c17fa47878dc55b6","getStringForLocale","key","locale","strings","getStringsForLocale","string","Error","$5b160d28a433310d$var$getStringsForLocale","defaultLocale","getGlobalDictionaryForPackage","packageName","window","globalStrings","pkg","dictionary","constructor","messages","Object","fromEntries","entries","filter","v","language","$5b160d28a433310d$var$getLanguage","startsWith","Intl","Locale","split"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@internationalized/string/dist/packages/@internationalized/string/src/LocalizedStringDictionary.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedString} from './LocalizedStringFormatter';\n\nexport type LocalizedStrings<K extends string, T extends LocalizedString> = {\n  [lang: string]: Record<K, T>\n};\n\nconst localeSymbol = Symbol.for('react-aria.i18n.locale');\nconst stringsSymbol = Symbol.for('react-aria.i18n.strings');\nlet cachedGlobalStrings: {[packageName: string]: LocalizedStringDictionary<any, any>} | null | undefined = undefined;\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class LocalizedStringDictionary<K extends string = string, T extends LocalizedString = string> {\n  private strings: LocalizedStrings<K, T>;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings<K, T>, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n    this.strings = Object.fromEntries(\n      Object.entries(messages).filter(([, v]) => v)\n    );\n    this.defaultLocale = defaultLocale;\n  }\n\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key: K, locale: string): T {\n    let strings = this.getStringsForLocale(locale);\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n\n  /** Returns all localized strings for the given locale. */\n  getStringsForLocale(locale: string): Record<K, T> {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    return strings;\n  }\n\n  static getGlobalDictionaryForPackage<K extends string = string, T extends LocalizedString = string>(packageName: string): LocalizedStringDictionary<K, T> | null {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    let locale = window[localeSymbol];\n    if (cachedGlobalStrings === undefined) {\n      let globalStrings = window[stringsSymbol];\n      if (!globalStrings) {\n        return null;\n      }\n\n      cachedGlobalStrings = {};\n      for (let pkg in globalStrings) {\n        cachedGlobalStrings[pkg] = new LocalizedStringDictionary({[locale]: globalStrings[pkg]}, locale);\n      }\n    }\n\n    let dictionary = cachedGlobalStrings?.[packageName];\n    if (!dictionary) {\n      throw new Error(`Strings for package \"${packageName}\" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);\n    }\n\n    return dictionary;\n  }\n}\n\nfunction getStringsForLocale<K extends string, T extends LocalizedString>(locale: string, strings: LocalizedStrings<K, T>, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}