{"ast":null,"code":"\"use client\";\n\n// src/use-avatar-group.ts\nimport { avatarGroup } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, compact } from \"@nextui-org/shared-utils\";\nimport { getValidChildren } from \"@nextui-org/react-utils\";\nimport { cloneElement, useMemo } from \"react\";\nfunction useAvatarGroup(props = {}) {\n  const {\n    as,\n    ref,\n    max = 5,\n    total,\n    size,\n    color,\n    radius,\n    children,\n    isBordered,\n    isDisabled,\n    isGrid,\n    renderCount,\n    className,\n    classNames,\n    ...otherProps\n  } = props;\n  const domRef = useDOMRef(ref);\n  const Component = as || \"div\";\n  const context = useMemo(() => ({\n    size,\n    color,\n    radius,\n    isGrid,\n    isBordered,\n    isDisabled\n  }), [size, color, radius, isGrid, isBordered, isDisabled]);\n  const slots = useMemo(() => avatarGroup({\n    className,\n    isGrid\n  }), [className, isGrid]);\n  const validChildren = getValidChildren(children);\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  const remainingCount = total ? total : max != null ? validChildren.length - max : -1;\n  const clones = childrenWithinMax.map((child, index) => {\n    const isFirstAvatar = index === 0;\n    const isLastAvatar = index === childrenWithinMax.length - 1;\n    const childProps = {\n      className: clsx(isFirstAvatar ? \"ms-0\" : !isGrid ? \"-ms-2\" : \"\", isLastAvatar && remainingCount < 1 ? \"hover:-translate-x-0\" : \"\")\n    };\n    return cloneElement(child, compact(childProps));\n  });\n  const getAvatarGroupProps = () => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: clsx(classNames == null ? void 0 : classNames.base, className)\n      }),\n      role: \"group\",\n      ...otherProps\n    };\n  };\n  const getAvatarGroupCountProps = () => {\n    return {\n      className: slots.count({\n        class: classNames == null ? void 0 : classNames.count\n      })\n    };\n  };\n  return {\n    Component,\n    context,\n    remainingCount,\n    clones,\n    renderCount,\n    getAvatarGroupProps,\n    getAvatarGroupCountProps\n  };\n}\nexport { useAvatarGroup };","map":{"version":3,"names":["avatarGroup","useDOMRef","clsx","compact","getValidChildren","cloneElement","useMemo","useAvatarGroup","props","as","ref","max","total","size","color","radius","children","isBordered","isDisabled","isGrid","renderCount","className","classNames","otherProps","domRef","Component","context","slots","validChildren","childrenWithinMax","slice","remainingCount","length","clones","map","child","index","isFirstAvatar","isLastAvatar","childProps","getAvatarGroupProps","base","class","role","getAvatarGroupCountProps","count"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@nextui-org/avatar/dist/chunk-YTVNLXJ4.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-avatar-group.ts\nimport { avatarGroup } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, compact } from \"@nextui-org/shared-utils\";\nimport { getValidChildren } from \"@nextui-org/react-utils\";\nimport { cloneElement, useMemo } from \"react\";\nfunction useAvatarGroup(props = {}) {\n  const {\n    as,\n    ref,\n    max = 5,\n    total,\n    size,\n    color,\n    radius,\n    children,\n    isBordered,\n    isDisabled,\n    isGrid,\n    renderCount,\n    className,\n    classNames,\n    ...otherProps\n  } = props;\n  const domRef = useDOMRef(ref);\n  const Component = as || \"div\";\n  const context = useMemo(\n    () => ({\n      size,\n      color,\n      radius,\n      isGrid,\n      isBordered,\n      isDisabled\n    }),\n    [size, color, radius, isGrid, isBordered, isDisabled]\n  );\n  const slots = useMemo(() => avatarGroup({ className, isGrid }), [className, isGrid]);\n  const validChildren = getValidChildren(children);\n  const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;\n  const remainingCount = total ? total : max != null ? validChildren.length - max : -1;\n  const clones = childrenWithinMax.map((child, index) => {\n    const isFirstAvatar = index === 0;\n    const isLastAvatar = index === childrenWithinMax.length - 1;\n    const childProps = {\n      className: clsx(\n        isFirstAvatar ? \"ms-0\" : !isGrid ? \"-ms-2\" : \"\",\n        isLastAvatar && remainingCount < 1 ? \"hover:-translate-x-0\" : \"\"\n      )\n    };\n    return cloneElement(child, compact(childProps));\n  });\n  const getAvatarGroupProps = () => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: clsx(classNames == null ? void 0 : classNames.base, className)\n      }),\n      role: \"group\",\n      ...otherProps\n    };\n  };\n  const getAvatarGroupCountProps = () => {\n    return {\n      className: slots.count({\n        class: classNames == null ? void 0 : classNames.count\n      })\n    };\n  };\n  return {\n    Component,\n    context,\n    remainingCount,\n    clones,\n    renderCount,\n    getAvatarGroupProps,\n    getAvatarGroupCountProps\n  };\n}\n\nexport {\n  useAvatarGroup\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}