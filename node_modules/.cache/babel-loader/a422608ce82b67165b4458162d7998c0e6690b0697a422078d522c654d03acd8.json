{"ast":null,"code":"import { getInteractionModality as $6VwSn$getInteractionModality, isFocusVisible as $6VwSn$isFocusVisible, useHover as $6VwSn$useHover } from \"@react-aria/interactions\";\nimport { useId as $6VwSn$useId, mergeProps as $6VwSn$mergeProps } from \"@react-aria/utils\";\nimport { useRef as $6VwSn$useRef, useEffect as $6VwSn$useEffect } from \"react\";\nimport { useFocusable as $6VwSn$useFocusable } from \"@react-aria/focus\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $4e1b34546679e357$export$a6da6c504e4bba8b(props, state, ref) {\n  let {\n    isDisabled: isDisabled,\n    trigger: trigger\n  } = props;\n  let tooltipId = (0, $6VwSn$useId)();\n  let isHovered = (0, $6VwSn$useRef)(false);\n  let isFocused = (0, $6VwSn$useRef)(false);\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) state.open(isFocused.current);\n  };\n  let handleHide = immediate => {\n    if (!isHovered.current && !isFocused.current) state.close(immediate);\n  };\n  (0, $6VwSn$useEffect)(() => {\n    let onKeyDown = e => {\n      if (ref && ref.current)\n        // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        {\n          if (e.key === 'Escape') {\n            e.stopPropagation();\n            state.close(true);\n          }\n        }\n    };\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return () => {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n  let onHoverStart = () => {\n    if (trigger === 'focus') return;\n    // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n    if ((0, $6VwSn$getInteractionModality)() === 'pointer') isHovered.current = true;else isHovered.current = false;\n    handleShow();\n  };\n  let onHoverEnd = () => {\n    if (trigger === 'focus') return;\n    // no matter how the trigger is left, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n  let onFocus = () => {\n    let isVisible = (0, $6VwSn$isFocusVisible)();\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n  let {\n    hoverProps: hoverProps\n  } = (0, $6VwSn$useHover)({\n    isDisabled: isDisabled,\n    onHoverStart: onHoverStart,\n    onHoverEnd: onHoverEnd\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $6VwSn$useFocusable)({\n    isDisabled: isDisabled,\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, ref);\n  return {\n    triggerProps: {\n      'aria-describedby': state.isOpen ? tooltipId : undefined,\n      ...(0, $6VwSn$mergeProps)(focusableProps, hoverProps, {\n        onPointerDown: onPressStart,\n        onKeyDown: onPressStart\n      })\n    },\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\nexport { $4e1b34546679e357$export$a6da6c504e4bba8b as useTooltipTrigger };","map":{"version":3,"names":["$4e1b34546679e357$export$a6da6c504e4bba8b","props","state","ref","isDisabled","trigger","tooltipId","$6VwSn$useId","isHovered","$6VwSn$useRef","isFocused","handleShow","current","open","handleHide","immediate","close","$6VwSn$useEffect","onKeyDown","e","key","stopPropagation","isOpen","document","addEventListener","removeEventListener","onHoverStart","$6VwSn$getInteractionModality","onHoverEnd","onPressStart","onFocus","isVisible","$6VwSn$isFocusVisible","onBlur","hoverProps","$6VwSn$useHover","focusableProps","$6VwSn$useFocusable","triggerProps","undefined","$6VwSn$mergeProps","onPointerDown","tooltipProps","id"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/tooltip/dist/packages/@react-aria/tooltip/src/useTooltipTrigger.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {getInteractionModality, isFocusVisible, useHover} from '@react-aria/interactions';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {TooltipTriggerState} from '@react-stately/tooltip';\nimport {useFocusable} from '@react-aria/focus';\n\nexport interface TooltipTriggerAria {\n  /**\n   * Props for the trigger element.\n   */\n  triggerProps: DOMAttributes,\n\n  /**\n   * Props for the overlay container element.\n   */\n  tooltipProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a tooltip trigger, e.g. a button\n * that shows a description when focused or hovered.\n */\nexport function useTooltipTrigger(props: TooltipTriggerProps, state: TooltipTriggerState, ref: RefObject<FocusableElement>) : TooltipTriggerAria {\n  let {\n    isDisabled,\n    trigger\n  } = props;\n\n  let tooltipId = useId();\n\n  let isHovered = useRef(false);\n  let isFocused = useRef(false);\n\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) {\n      state.open(isFocused.current);\n    }\n  };\n\n  let handleHide = (immediate?: boolean) => {\n    if (!isHovered.current && !isFocused.current) {\n      state.close(immediate);\n    }\n  };\n\n  useEffect(() => {\n    let onKeyDown = (e) => {\n      if (ref && ref.current) {\n        // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        if (e.key === 'Escape') {\n          e.stopPropagation();\n          state.close(true);\n        }\n      }\n    };\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return () => {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n\n  let onHoverStart = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n    if (getInteractionModality() === 'pointer') {\n      isHovered.current = true;\n    } else {\n      isHovered.current = false;\n    }\n    handleShow();\n  };\n\n  let onHoverEnd = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // no matter how the trigger is left, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let onFocus = () => {\n    let isVisible = isFocusVisible();\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart,\n    onHoverEnd\n  });\n\n  let {focusableProps} = useFocusable({\n    isDisabled,\n    onFocus,\n    onBlur\n  }, ref);\n\n  return {\n    triggerProps: {\n      'aria-describedby': state.isOpen ? tooltipId : undefined,\n      ...mergeProps(focusableProps, hoverProps, {\n        onPointerDown: onPressStart,\n        onKeyDown: onPressStart\n      })\n    },\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AAoCO,SAASA,0CAAkBC,KAA0B,EAAEC,KAA0B,EAAEC,GAAgC;EACxH,IAAI;IAAAC,UAAA,EACFA,UAAU;IAAAC,OAAA,EACVA;EAAO,CACR,GAAGJ,KAAA;EAEJ,IAAIK,SAAA,GAAY,IAAAC,YAAI;EAEpB,IAAIC,SAAA,GAAY,IAAAC,aAAK,EAAE;EACvB,IAAIC,SAAA,GAAY,IAAAD,aAAK,EAAE;EAEvB,IAAIE,UAAA,GAAaA,CAAA;IACf,IAAIH,SAAA,CAAUI,OAAO,IAAIF,SAAA,CAAUE,OAAO,EACxCV,KAAA,CAAMW,IAAI,CAACH,SAAA,CAAUE,OAAO;EAEhC;EAEA,IAAIE,UAAA,GAAcC,SAAA;IAChB,IAAI,CAACP,SAAA,CAAUI,OAAO,IAAI,CAACF,SAAA,CAAUE,OAAO,EAC1CV,KAAA,CAAMc,KAAK,CAACD,SAAA;EAEhB;EAEA,IAAAE,gBAAQ,EAAE;IACR,IAAIC,SAAA,GAAaC,CAAA;MACf,IAAIhB,GAAA,IAAOA,GAAA,CAAIS,OAAO;QACpB;QACA;QACA;UAAA,IAAIO,CAAA,CAAEC,GAAG,KAAK,UAAU;YACtBD,CAAA,CAAEE,eAAe;YACjBnB,KAAA,CAAMc,KAAK,CAAC;UACd;QAAA;IAEJ;IACA,IAAId,KAAA,CAAMoB,MAAM,EAAE;MAChBC,QAAA,CAASC,gBAAgB,CAAC,WAAWN,SAAA,EAAW;MAChD,OAAO;QACLK,QAAA,CAASE,mBAAmB,CAAC,WAAWP,SAAA,EAAW;MACrD;IACF;EACF,GAAG,CAACf,GAAA,EAAKD,KAAA,CAAM;EAEf,IAAIwB,YAAA,GAAeA,CAAA;IACjB,IAAIrB,OAAA,KAAY,SACd;IAEF;IACA;IACA;IACA;IACA,IAAI,IAAAsB,6BAAqB,QAAQ,WAC/BnB,SAAA,CAAUI,OAAO,GAAG,UAEpBJ,SAAA,CAAUI,OAAO,GAAG;IAEtBD,UAAA;EACF;EAEA,IAAIiB,UAAA,GAAaA,CAAA;IACf,IAAIvB,OAAA,KAAY,SACd;IAEF;IACAK,SAAA,CAAUE,OAAO,GAAG;IACpBJ,SAAA,CAAUI,OAAO,GAAG;IACpBE,UAAA;EACF;EAEA,IAAIe,YAAA,GAAeA,CAAA;IACjB;IACAnB,SAAA,CAAUE,OAAO,GAAG;IACpBJ,SAAA,CAAUI,OAAO,GAAG;IACpBE,UAAA,CAAW;EACb;EAEA,IAAIgB,OAAA,GAAUA,CAAA;IACZ,IAAIC,SAAA,GAAY,IAAAC,qBAAa;IAC7B,IAAID,SAAA,EAAW;MACbrB,SAAA,CAAUE,OAAO,GAAG;MACpBD,UAAA;IACF;EACF;EAEA,IAAIsB,MAAA,GAASA,CAAA;IACXvB,SAAA,CAAUE,OAAO,GAAG;IACpBJ,SAAA,CAAUI,OAAO,GAAG;IACpBE,UAAA,CAAW;EACb;EAEA,IAAI;IAAAoB,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,eAAO,EAAE;gBAC1B/B,UAAA;kBACAsB,YAAA;gBACAE;EACF;EAEA,IAAI;IAAAQ,cAAA,EAACA;EAAc,CAAC,GAAG,IAAAC,mBAAW,EAAE;gBAClCjC,UAAA;aACA0B,OAAA;YACAG;EACF,GAAG9B,GAAA;EAEH,OAAO;IACLmC,YAAA,EAAc;MACZ,oBAAoBpC,KAAA,CAAMoB,MAAM,GAAGhB,SAAA,GAAYiC,SAAA;MAC/C,GAAG,IAAAC,iBAAS,EAAEJ,cAAA,EAAgBF,UAAA,EAAY;QACxCO,aAAA,EAAeZ,YAAA;QACfX,SAAA,EAAWW;MACb;IACF;IACAa,YAAA,EAAc;MACZC,EAAA,EAAIrC;IACN;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}