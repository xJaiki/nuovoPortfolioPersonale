{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */const $2140fb2337097f2d$export$552312adfd451dab = new WeakMap();\nfunction $2140fb2337097f2d$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\nfunction $2140fb2337097f2d$export$37cd4213f2ad742e(state, columnKey) {\n  let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);\n  if (!gridId) throw new Error('Unknown grid');\n  return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;\n}\nfunction $2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey) {\n  let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);\n  if (!gridId) throw new Error('Unknown grid');\n  return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(rowKey)}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;\n}\nfunction $2140fb2337097f2d$export$85069b70317f543(state, rowKey) {\n  // A row is labelled by it's row headers.\n  return [...state.collection.rowHeaderColumnKeys].map(columnKey => $2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey)).join(' ');\n}\nexport { $2140fb2337097f2d$export$552312adfd451dab as gridIds, $2140fb2337097f2d$export$37cd4213f2ad742e as getColumnHeaderId, $2140fb2337097f2d$export$19baff3266315d44 as getCellId, $2140fb2337097f2d$export$85069b70317f543 as getRowLabelledBy };","map":{"version":3,"names":["$2140fb2337097f2d$export$552312adfd451dab","WeakMap","$2140fb2337097f2d$var$normalizeKey","key","replace","$2140fb2337097f2d$export$37cd4213f2ad742e","state","columnKey","gridId","get","Error","$2140fb2337097f2d$export$19baff3266315d44","rowKey","$2140fb2337097f2d$export$85069b70317f543","collection","rowHeaderColumnKeys","map","join"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/table/dist/packages/@react-aria/table/src/utils.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {TableState} from '@react-stately/table';\n\nexport const gridIds = new WeakMap<TableState<unknown>, string>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getColumnHeaderId<T>(state: TableState<T>, columnKey: Key): string {\n  let gridId = gridIds.get(state);\n  if (!gridId) {\n    throw new Error('Unknown grid');\n  }\n\n  return `${gridId}-${normalizeKey(columnKey)}`;\n}\n\nexport function getCellId<T>(state: TableState<T>, rowKey: Key, columnKey: Key) {\n  let gridId = gridIds.get(state);\n  if (!gridId) {\n    throw new Error('Unknown grid');\n  }\n\n  return `${gridId}-${normalizeKey(rowKey)}-${normalizeKey(columnKey)}`;\n}\n\nexport function getRowLabelledBy<T>(state: TableState<T>, rowKey: Key): string {\n  // A row is labelled by it's row headers.\n  return [...state.collection.rowHeaderColumnKeys].map(columnKey =>\n    getCellId(state, rowKey, columnKey)\n  ).join(' ');\n}\n"],"mappings":"AAAA;;;;;;;;;;GAeO,MAAMA,yCAAA,GAAU,IAAIC,OAAA;AAE3B,SAASC,mCAAaC,GAAQ;EAC5B,IAAI,OAAOA,GAAA,KAAQ,UACjB,OAAOA,GAAA,CAAIC,OAAO,CAAC,QAAQ;EAG7B,OAAO,KAAKD,GAAA;AACd;AAEO,SAASE,0CAAqBC,KAAoB,EAAEC,SAAc;EACvE,IAAIC,MAAA,GAASR,yCAAA,CAAQS,GAAG,CAACH,KAAA;EACzB,IAAI,CAACE,MAAA,EACH,MAAM,IAAIE,KAAA,CAAM;EAGlB,OAAO,GAAGF,MAAA,IAAUN,kCAAA,CAAaK,SAAA,GAAY;AAC/C;AAEO,SAASI,0CAAaL,KAAoB,EAAEM,MAAW,EAAEL,SAAc;EAC5E,IAAIC,MAAA,GAASR,yCAAA,CAAQS,GAAG,CAACH,KAAA;EACzB,IAAI,CAACE,MAAA,EACH,MAAM,IAAIE,KAAA,CAAM;EAGlB,OAAO,GAAGF,MAAA,IAAUN,kCAAA,CAAaU,MAAA,KAAWV,kCAAA,CAAaK,SAAA,GAAY;AACvE;AAEO,SAASM,yCAAoBP,KAAoB,EAAEM,MAAW;EACnE;EACA,OAAO,C,GAAIN,KAAA,CAAMQ,UAAU,CAACC,mBAAmB,CAAC,CAACC,GAAG,CAACT,SAAA,IACnDI,yCAAA,CAAUL,KAAA,EAAOM,MAAA,EAAQL,SAAA,GACzBU,IAAI,CAAC;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}