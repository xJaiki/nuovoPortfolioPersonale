{"ast":null,"code":"import { generateId as $99b62ae3ff97ec45$export$567fc7097e064344 } from \"./utils.mjs\";\nimport { filterDOMProps as $dObGJ$filterDOMProps, useLinkProps as $dObGJ$useLinkProps, mergeProps as $dObGJ$mergeProps } from \"@react-aria/utils\";\nimport { useSelectableItem as $dObGJ$useSelectableItem } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $0175d55c2a017ebc$export$fdf4756d5b8ef90a(props, state, ref) {\n  let {\n    key: key,\n    isDisabled: propsDisabled,\n    shouldSelectOnPressUp: shouldSelectOnPressUp\n  } = props;\n  let {\n    selectionManager: manager,\n    selectedKey: selectedKey\n  } = state;\n  let isSelected = key === selectedKey;\n  let isDisabled = propsDisabled || state.isDisabled || state.selectionManager.isDisabled(key);\n  let {\n    itemProps: itemProps,\n    isPressed: isPressed\n  } = (0, $dObGJ$useSelectableItem)({\n    selectionManager: manager,\n    key: key,\n    ref: ref,\n    isDisabled: isDisabled,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    linkBehavior: 'selection'\n  });\n  let tabId = (0, $99b62ae3ff97ec45$export$567fc7097e064344)(state, key, 'tab');\n  let tabPanelId = (0, $99b62ae3ff97ec45$export$567fc7097e064344)(state, key, 'tabpanel');\n  let {\n    tabIndex: tabIndex\n  } = itemProps;\n  let item = state.collection.getItem(key);\n  let domProps = (0, $dObGJ$filterDOMProps)(item === null || item === void 0 ? void 0 : item.props, {\n    labelable: true\n  });\n  delete domProps.id;\n  let linkProps = (0, $dObGJ$useLinkProps)(item === null || item === void 0 ? void 0 : item.props);\n  return {\n    tabProps: (0, $dObGJ$mergeProps)(domProps, linkProps, itemProps, {\n      id: tabId,\n      'aria-selected': isSelected,\n      'aria-disabled': isDisabled || undefined,\n      'aria-controls': isSelected ? tabPanelId : undefined,\n      tabIndex: isDisabled ? undefined : tabIndex,\n      role: 'tab'\n    }),\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\nexport { $0175d55c2a017ebc$export$fdf4756d5b8ef90a as useTab };","map":{"version":3,"names":["$0175d55c2a017ebc$export$fdf4756d5b8ef90a","props","state","ref","key","isDisabled","propsDisabled","shouldSelectOnPressUp","selectionManager","manager","selectedKey","isSelected","itemProps","isPressed","$dObGJ$useSelectableItem","linkBehavior","tabId","$99b62ae3ff97ec45$export$567fc7097e064344","tabPanelId","tabIndex","item","collection","getItem","domProps","$dObGJ$filterDOMProps","labelable","id","linkProps","$dObGJ$useLinkProps","tabProps","$dObGJ$mergeProps","undefined","role"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@react-aria/tabs/dist/packages/@react-aria/tabs/src/useTab.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTabProps} from '@react-types/tabs';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useLinkProps} from '@react-aria/utils';\nimport {generateId} from './utils';\nimport {RefObject} from 'react';\nimport {TabListState} from '@react-stately/tabs';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface TabAria {\n  /** Props for the tab element. */\n  tabProps: DOMAttributes,\n  /** Whether the tab is currently selected. */\n  isSelected: boolean,\n  /** Whether the tab is disabled. */\n  isDisabled: boolean,\n  /** Whether the tab is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a tab.\n * When selected, the associated tab panel is shown.\n */\nexport function useTab<T>(\n  props: AriaTabProps,\n  state: TabListState<T>,\n  ref: RefObject<FocusableElement>\n): TabAria {\n  let {key, isDisabled: propsDisabled, shouldSelectOnPressUp} = props;\n  let {selectionManager: manager, selectedKey} = state;\n\n  let isSelected = key === selectedKey;\n\n  let isDisabled = propsDisabled || state.isDisabled || state.selectionManager.isDisabled(key);\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: manager,\n    key,\n    ref,\n    isDisabled,\n    shouldSelectOnPressUp,\n    linkBehavior: 'selection'\n  });\n\n  let tabId = generateId(state, key, 'tab');\n  let tabPanelId = generateId(state, key, 'tabpanel');\n  let {tabIndex} = itemProps;\n\n  let item = state.collection.getItem(key);\n  let domProps = filterDOMProps(item?.props, {labelable: true});\n  delete domProps.id;\n  let linkProps = useLinkProps(item?.props);\n\n  return {\n    tabProps: mergeProps(domProps, linkProps, itemProps, {\n      id: tabId,\n      'aria-selected': isSelected,\n      'aria-disabled': isDisabled || undefined,\n      'aria-controls': isSelected ? tabPanelId : undefined,\n      tabIndex: isDisabled ? undefined : tabIndex,\n      role: 'tab'\n    }),\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AAmCO,SAASA,0CACdC,KAAmB,EACnBC,KAAsB,EACtBC,GAAgC;EAEhC,IAAI;IAAAC,GAAA,EAACA,GAAG;IAAEC,UAAA,EAAYC,aAAa;IAAAC,qBAAA,EAAEA;EAAqB,CAAC,GAAGN,KAAA;EAC9D,IAAI;IAACO,gBAAA,EAAkBC,OAAO;IAAAC,WAAA,EAAEA;EAAW,CAAC,GAAGR,KAAA;EAE/C,IAAIS,UAAA,GAAaP,GAAA,KAAQM,WAAA;EAEzB,IAAIL,UAAA,GAAaC,aAAA,IAAiBJ,KAAA,CAAMG,UAAU,IAAIH,KAAA,CAAMM,gBAAgB,CAACH,UAAU,CAACD,GAAA;EACxF,IAAI;IAAAQ,SAAA,EAACA,SAAS;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,wBAAgB,EAAE;IAC7CN,gBAAA,EAAkBC,OAAA;SAClBL,GAAA;SACAD,GAAA;gBACAE,UAAA;2BACAE,qBAAA;IACAQ,YAAA,EAAc;EAChB;EAEA,IAAIC,KAAA,GAAQ,IAAAC,yCAAS,EAAEf,KAAA,EAAOE,GAAA,EAAK;EACnC,IAAIc,UAAA,GAAa,IAAAD,yCAAS,EAAEf,KAAA,EAAOE,GAAA,EAAK;EACxC,IAAI;IAAAe,QAAA,EAACA;EAAQ,CAAC,GAAGP,SAAA;EAEjB,IAAIQ,IAAA,GAAOlB,KAAA,CAAMmB,UAAU,CAACC,OAAO,CAAClB,GAAA;EACpC,IAAImB,QAAA,GAAW,IAAAC,qBAAa,EAAEJ,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMnB,KAAK,EAAE;IAACwB,SAAA,EAAW;EAAI;EAC3D,OAAOF,QAAA,CAASG,EAAE;EAClB,IAAIC,SAAA,GAAY,IAAAC,mBAAW,EAAER,IAAA,aAAAA,IAAA,uBAAAA,IAAA,CAAMnB,KAAK;EAExC,OAAO;IACL4B,QAAA,EAAU,IAAAC,iBAAS,EAAEP,QAAA,EAAUI,SAAA,EAAWf,SAAA,EAAW;MACnDc,EAAA,EAAIV,KAAA;MACJ,iBAAiBL,UAAA;MACjB,iBAAiBN,UAAA,IAAc0B,SAAA;MAC/B,iBAAiBpB,UAAA,GAAaO,UAAA,GAAaa,SAAA;MAC3CZ,QAAA,EAAUd,UAAA,GAAa0B,SAAA,GAAYZ,QAAA;MACnCa,IAAA,EAAM;IACR;gBACArB,UAAA;gBACAN,UAAA;eACAQ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}