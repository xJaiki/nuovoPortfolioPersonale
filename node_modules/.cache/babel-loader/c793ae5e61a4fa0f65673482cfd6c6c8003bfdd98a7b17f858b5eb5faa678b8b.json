{"ast":null,"code":"import $fkdHx$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useId as $fkdHx$useId } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $fkdHx$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nfunction $7cb39d07f245a780$export$70e2eed1a92976ad(props, state) {\n  let {\n    key: key\n  } = props;\n  let manager = state.selectionManager;\n  let checkboxId = (0, $fkdHx$useId)();\n  let isDisabled = !state.selectionManager.canSelectItem(key);\n  let isSelected = state.selectionManager.isSelected(key);\n  let onChange = () => manager.select(key);\n  const stringFormatter = (0, $fkdHx$useLocalizedStringFormatter)((0, $parcel$interopDefault($fkdHx$intlStringsmodulejs)), '@react-aria/grid');\n  return {\n    checkboxProps: {\n      id: checkboxId,\n      'aria-label': stringFormatter.format('select'),\n      isSelected: isSelected,\n      isDisabled: isDisabled,\n      onChange: onChange\n    }\n  };\n}\nexport { $7cb39d07f245a780$export$70e2eed1a92976ad as useGridSelectionCheckbox };","map":{"version":3,"names":["$7cb39d07f245a780$export$70e2eed1a92976ad","props","state","key","manager","selectionManager","checkboxId","$fkdHx$useId","isDisabled","canSelectItem","isSelected","onChange","select","stringFormatter","$fkdHx$useLocalizedStringFormatter","$parcel$interopDefault","$fkdHx$intlStringsmodulejs","checkboxProps","id","format"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/grid/dist/packages/@react-aria/grid/src/useGridSelectionCheckbox.ts"],"sourcesContent":["import {AriaCheckboxProps} from '@react-types/checkbox';\nimport {GridCollection} from '@react-types/grid';\nimport {GridState} from '@react-stately/grid';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {Key} from '@react-types/shared';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaGridSelectionCheckboxProps {\n  /** A unique key for the checkbox. */\n  key: Key\n}\n\nexport interface GridSelectionCheckboxAria {\n  /** Props for the row selection checkbox element. */\n  checkboxProps: AriaCheckboxProps\n}\n\n\n/**\n * Provides the behavior and accessibility implementation for a selection checkbox in a grid.\n * @param props - Props for the selection checkbox.\n * @param state - State of the grid, as returned by `useGridState`.\n */\nexport function useGridSelectionCheckbox<T, C extends GridCollection<T>>(props: AriaGridSelectionCheckboxProps, state: GridState<T, C>): GridSelectionCheckboxAria {\n  let {key} = props;\n\n  let manager = state.selectionManager;\n  let checkboxId = useId();\n  let isDisabled = !state.selectionManager.canSelectItem(key);\n  let isSelected = state.selectionManager.isSelected(key);\n\n  let onChange = () => manager.select(key);\n\n  const stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n\n  return {\n    checkboxProps: {\n      id: checkboxId,\n      'aria-label': stringFormatter.format('select'),\n      isSelected,\n      isDisabled,\n      onChange\n    }\n  };\n}\n"],"mappings":";;;;;;AAyBO,SAASA,0CAAyDC,KAAqC,EAAEC,KAAsB;EACpI,IAAI;IAAAC,GAAA,EAACA;EAAG,CAAC,GAAGF,KAAA;EAEZ,IAAIG,OAAA,GAAUF,KAAA,CAAMG,gBAAgB;EACpC,IAAIC,UAAA,GAAa,IAAAC,YAAI;EACrB,IAAIC,UAAA,GAAa,CAACN,KAAA,CAAMG,gBAAgB,CAACI,aAAa,CAACN,GAAA;EACvD,IAAIO,UAAA,GAAaR,KAAA,CAAMG,gBAAgB,CAACK,UAAU,CAACP,GAAA;EAEnD,IAAIQ,QAAA,GAAWA,CAAA,KAAMP,OAAA,CAAQQ,MAAM,CAACT,GAAA;EAEpC,MAAMU,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAElE,OAAO;IACLC,aAAA,EAAe;MACbC,EAAA,EAAIZ,UAAA;MACJ,cAAcO,eAAA,CAAgBM,MAAM,CAAC;kBACrCT,UAAA;kBACAF,UAAA;gBACAG;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}