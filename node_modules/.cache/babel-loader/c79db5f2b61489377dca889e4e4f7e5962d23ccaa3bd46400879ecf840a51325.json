{"ast":null,"code":"import { createFocusManager as $7CEvq$createFocusManager, getFocusableTreeWalker as $7CEvq$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { mergeProps as $7CEvq$mergeProps } from \"@react-aria/utils\";\nimport { useMemo as $7CEvq$useMemo } from \"react\";\nimport { useLocale as $7CEvq$useLocale } from \"@react-aria/i18n\";\nimport { usePress as $7CEvq$usePress } from \"@react-aria/interactions\";\nfunction $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref, disableArrowNavigation) {\n  let {\n    direction: direction\n  } = (0, $7CEvq$useLocale)();\n  let focusManager = (0, $7CEvq$useMemo)(() => (0, $7CEvq$createFocusManager)(ref), [ref]);\n  // Open the popover on alt + arrow down\n  let onKeyDown = e => {\n    if (!e.currentTarget.contains(e.target)) return;\n    if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp') && 'setOpen' in state) {\n      e.preventDefault();\n      e.stopPropagation();\n      state.setOpen(true);\n    }\n    if (disableArrowNavigation) return;\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === 'rtl') focusManager.focusNext();else focusManager.focusPrevious();\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === 'rtl') focusManager.focusPrevious();else focusManager.focusNext();\n        break;\n    }\n  };\n  // Focus the first placeholder segment from the end on mouse down/touch up in the field.\n  let focusLast = () => {\n    var _window_event;\n    // Try to find the segment prior to the element that was clicked on.\n    let target = (_window_event = window.event) === null || _window_event === void 0 ? void 0 : _window_event.target;\n    let walker = (0, $7CEvq$getFocusableTreeWalker)(ref.current, {\n      tabbable: true\n    });\n    if (target) {\n      walker.currentNode = target;\n      target = walker.previousNode();\n    }\n    // If no target found, find the last element from the end.\n    if (!target) {\n      let last;\n      do {\n        last = walker.lastChild();\n        if (last) target = last;\n      } while (last);\n    }\n    // Now go backwards until we find an element that is not a placeholder.\n    while (target === null || target === void 0 ? void 0 : target.hasAttribute('data-placeholder')) {\n      let prev = walker.previousNode();\n      if (prev && prev.hasAttribute('data-placeholder')) target = prev;else break;\n    }\n    if (target) target.focus();\n  };\n  let {\n    pressProps: pressProps\n  } = (0, $7CEvq$usePress)({\n    preventFocusOnPress: true,\n    allowTextSelectionOnPress: true,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse') focusLast();\n    },\n    onPress(e) {\n      if (e.pointerType !== 'mouse') focusLast();\n    }\n  });\n  return (0, $7CEvq$mergeProps)(pressProps, {\n    onKeyDown: onKeyDown\n  });\n}\nexport { $3dfb0f96be0d6a08$export$4a931266a3838b86 as useDatePickerGroup };","map":{"version":3,"names":["$3dfb0f96be0d6a08$export$4a931266a3838b86","state","ref","disableArrowNavigation","direction","$7CEvq$useLocale","focusManager","$7CEvq$useMemo","$7CEvq$createFocusManager","onKeyDown","e","currentTarget","contains","target","altKey","key","preventDefault","stopPropagation","setOpen","focusNext","focusPrevious","focusLast","_window_event","window","event","walker","$7CEvq$getFocusableTreeWalker","current","tabbable","currentNode","previousNode","last","lastChild","hasAttribute","prev","focus","pressProps","$7CEvq$usePress","preventFocusOnPress","allowTextSelectionOnPress","onPressStart","pointerType","onPress","$7CEvq$mergeProps"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@react-aria/datepicker/dist/packages/@react-aria/datepicker/src/useDatePickerGroup.ts"],"sourcesContent":["import {createFocusManager, getFocusableTreeWalker} from '@react-aria/focus';\nimport {DateFieldState, DatePickerState, DateRangePickerState} from '@react-stately/datepicker';\nimport {FocusableElement, KeyboardEvent} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useMemo} from 'react';\nimport {useLocale} from '@react-aria/i18n';\nimport {usePress} from '@react-aria/interactions';\n\nexport function useDatePickerGroup(state: DatePickerState | DateRangePickerState | DateFieldState, ref: RefObject<Element>, disableArrowNavigation?: boolean) {\n  let {direction} = useLocale();\n  let focusManager = useMemo(() => createFocusManager(ref), [ref]);\n\n  // Open the popover on alt + arrow down\n  let onKeyDown = (e: KeyboardEvent) => {\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n    \n    if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp') && 'setOpen' in state) {\n      e.preventDefault();\n      e.stopPropagation();\n      state.setOpen(true);\n    }\n\n    if (disableArrowNavigation) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === 'rtl') {\n          focusManager.focusNext();\n        } else {\n          focusManager.focusPrevious();\n        }\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === 'rtl') {\n          focusManager.focusPrevious();\n        } else {\n          focusManager.focusNext();\n        }\n        break;\n    }\n  };\n\n  // Focus the first placeholder segment from the end on mouse down/touch up in the field.\n  let focusLast = () => {\n    // Try to find the segment prior to the element that was clicked on.\n    let target = window.event?.target as FocusableElement;\n    let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n    if (target) {\n      walker.currentNode = target;\n      target = walker.previousNode() as FocusableElement;\n    }\n\n    // If no target found, find the last element from the end.\n    if (!target) {\n      let last: FocusableElement;\n      do {\n        last = walker.lastChild() as FocusableElement;\n        if (last) {\n          target = last;\n        }\n      } while (last);\n    }\n\n    // Now go backwards until we find an element that is not a placeholder.\n    while (target?.hasAttribute('data-placeholder')) {\n      let prev = walker.previousNode() as FocusableElement;\n      if (prev && prev.hasAttribute('data-placeholder')) {\n        target = prev;\n      } else {\n        break;\n      }\n    }\n\n    if (target) {\n      target.focus();\n    }\n  };\n\n  let {pressProps} = usePress({\n    preventFocusOnPress: true,\n    allowTextSelectionOnPress: true,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse') {\n        focusLast();\n      }\n    },\n    onPress(e) {\n      if (e.pointerType !== 'mouse') {\n        focusLast();\n      }\n    }\n  });\n\n  return mergeProps(pressProps, {onKeyDown});\n}\n"],"mappings":";;;;;AAQO,SAASA,0CAAmBC,KAA8D,EAAEC,GAAuB,EAAEC,sBAAgC;EAC1J,IAAI;IAAAC,SAAA,EAACA;EAAS,CAAC,GAAG,IAAAC,gBAAQ;EAC1B,IAAIC,YAAA,GAAe,IAAAC,cAAM,EAAE,MAAM,IAAAC,yBAAiB,EAAEN,GAAA,GAAM,CAACA,GAAA,CAAI;EAE/D;EACA,IAAIO,SAAA,GAAaC,CAAA;IACf,IAAI,CAACA,CAAA,CAAEC,aAAa,CAACC,QAAQ,CAACF,CAAA,CAAEG,MAAM,GACpC;IAGF,IAAIH,CAAA,CAAEI,MAAM,KAAKJ,CAAA,CAAEK,GAAG,KAAK,eAAeL,CAAA,CAAEK,GAAG,KAAK,SAAQ,KAAM,aAAad,KAAA,EAAO;MACpFS,CAAA,CAAEM,cAAc;MAChBN,CAAA,CAAEO,eAAe;MACjBhB,KAAA,CAAMiB,OAAO,CAAC;IAChB;IAEA,IAAIf,sBAAA,EACF;IAGF,QAAQO,CAAA,CAAEK,GAAG;MACX,KAAK;QACHL,CAAA,CAAEM,cAAc;QAChBN,CAAA,CAAEO,eAAe;QACjB,IAAIb,SAAA,KAAc,OAChBE,YAAA,CAAaa,SAAS,QAEtBb,YAAA,CAAac,aAAa;QAE5B;MACF,KAAK;QACHV,CAAA,CAAEM,cAAc;QAChBN,CAAA,CAAEO,eAAe;QACjB,IAAIb,SAAA,KAAc,OAChBE,YAAA,CAAac,aAAa,QAE1Bd,YAAA,CAAaa,SAAS;QAExB;IACJ;EACF;EAEA;EACA,IAAIE,SAAA,GAAYA,CAAA;QAEDC,aAAA;IADb;IACA,IAAIT,MAAA,IAASS,aAAA,GAAAC,MAAA,CAAOC,KAAK,cAAZF,aAAA,uBAAAA,aAAA,CAAcT,MAAM;IACjC,IAAIY,MAAA,GAAS,IAAAC,6BAAqB,EAAExB,GAAA,CAAIyB,OAAO,EAAE;MAACC,QAAA,EAAU;IAAI;IAChE,IAAIf,MAAA,EAAQ;MACVY,MAAA,CAAOI,WAAW,GAAGhB,MAAA;MACrBA,MAAA,GAASY,MAAA,CAAOK,YAAY;IAC9B;IAEA;IACA,IAAI,CAACjB,MAAA,EAAQ;MACX,IAAIkB,IAAA;MACJ,GAAG;QACDA,IAAA,GAAON,MAAA,CAAOO,SAAS;QACvB,IAAID,IAAA,EACFlB,MAAA,GAASkB,IAAA;MAEb,SAASA,IAAA;IACX;IAEA;IACA,OAAOlB,MAAA,aAAAA,MAAA,uBAAAA,MAAA,CAAQoB,YAAY,CAAC,qBAAqB;MAC/C,IAAIC,IAAA,GAAOT,MAAA,CAAOK,YAAY;MAC9B,IAAII,IAAA,IAAQA,IAAA,CAAKD,YAAY,CAAC,qBAC5BpB,MAAA,GAASqB,IAAA,MAET;IAEJ;IAEA,IAAIrB,MAAA,EACFA,MAAA,CAAOsB,KAAK;EAEhB;EAEA,IAAI;IAAAC,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,eAAO,EAAE;IAC1BC,mBAAA,EAAqB;IACrBC,yBAAA,EAA2B;IAC3BC,aAAa9B,CAAC;MACZ,IAAIA,CAAA,CAAE+B,WAAW,KAAK,SACpBpB,SAAA;IAEJ;IACAqB,QAAQhC,CAAC;MACP,IAAIA,CAAA,CAAE+B,WAAW,KAAK,SACpBpB,SAAA;IAEJ;EACF;EAEA,OAAO,IAAAsB,iBAAS,EAAEP,UAAA,EAAY;eAAC3B;EAAS;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}