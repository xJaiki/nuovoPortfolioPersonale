{"ast":null,"code":"import { Point as $3041db3296945e6e$export$baf26146a414f24a } from \"./Point.mjs\";\nimport { Rect as $60423f92c7f9ad87$export$c79fc6492f3af13d } from \"./Rect.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $364191b3decf3697$var$RollingAverage {\n  addSample(sample) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n  constructor() {\n    this.count = 0;\n    this.value = 0;\n  }\n}\nclass $364191b3decf3697$export$4455ee6afb38dcbb {\n  setVisibleRect(rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n      if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n    }\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) this.averagePerf.addSample(time);\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n      this.overscanY.addSample(o);\n    }\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n      this.overscanX.addSample(o);\n    }\n  }\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n    return overscanned;\n  }\n  constructor() {\n    this.startTime = 0;\n    this.averagePerf = new $364191b3decf3697$var$RollingAverage();\n    this.averageTime = new $364191b3decf3697$var$RollingAverage();\n    this.velocity = new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5);\n    this.overscanX = new $364191b3decf3697$var$RollingAverage();\n    this.overscanY = new $364191b3decf3697$var$RollingAverage();\n    this.visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n  }\n}\nexport { $364191b3decf3697$export$4455ee6afb38dcbb as OverscanManager };","map":{"version":3,"names":["$364191b3decf3697$var$RollingAverage","addSample","sample","count","value","$364191b3decf3697$export$4455ee6afb38dcbb","setVisibleRect","rect","time","performance","now","startTime","averageTime","x","visibleRect","velocity","y","collectMetrics","averagePerf","height","o","Math","abs","overscanY","width","overscanX","getOverscannedRect","overscanned","copy","round","min","$3041db3296945e6e$export$baf26146a414f24a","$60423f92c7f9ad87$export$c79fc6492f3af13d"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/OverscanManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}