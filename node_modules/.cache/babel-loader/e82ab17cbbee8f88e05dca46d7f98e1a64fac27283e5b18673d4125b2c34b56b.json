{"ast":null,"code":"import { getCellId as $2140fb2337097f2d$export$19baff3266315d44 } from \"./utils.mjs\";\nimport { useGridCell as $1jd6q$useGridCell } from \"@react-aria/grid\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $7713593715703b24$export$49571c903d73624c(props, state, ref) {\n  let {\n    gridCellProps: gridCellProps,\n    isPressed: isPressed\n  } = (0, $1jd6q$useGridCell)(props, state, ref);\n  let columnKey = props.node.column.key;\n  if (state.collection.rowHeaderColumnKeys.has(columnKey)) {\n    gridCellProps.role = 'rowheader';\n    gridCellProps.id = (0, $2140fb2337097f2d$export$19baff3266315d44)(state, props.node.parentKey, columnKey);\n  }\n  return {\n    gridCellProps: gridCellProps,\n    isPressed: isPressed\n  };\n}\nexport { $7713593715703b24$export$49571c903d73624c as useTableCell };","map":{"version":3,"names":["$7713593715703b24$export$49571c903d73624c","props","state","ref","gridCellProps","isPressed","$1jd6q$useGridCell","columnKey","node","column","key","collection","rowHeaderColumnKeys","has","role","id","$2140fb2337097f2d$export$19baff3266315d44","parentKey"],"sources":["/Users/mario/Documents/pythonmongoreact/soldini/soldini-front/node_modules/@react-aria/table/dist/packages/@react-aria/table/src/useTableCell.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {getCellId} from './utils';\nimport {GridNode} from '@react-types/grid';\nimport {RefObject} from 'react';\nimport {TableState} from '@react-stately/table';\nimport {useGridCell} from '@react-aria/grid';\n\nexport interface AriaTableCellProps {\n  /** An object representing the table cell. Contains all the relevant information that makes up the row header. */\n  node: GridNode<unknown>,\n  /** Whether the cell is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the cell.\n   * Please use onCellAction at the collection level instead.\n   * @deprecated\n   **/\n  onAction?: () => void\n}\n\nexport interface TableCellAria {\n  /** Props for the table cell element. */\n  gridCellProps: DOMAttributes,\n  /** Whether the cell is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a cell in a table.\n * @param props - Props for the cell.\n * @param state - State of the table, as returned by `useTableState`.\n * @param ref - The ref attached to the cell element.\n */\nexport function useTableCell<T>(props: AriaTableCellProps, state: TableState<T>, ref: RefObject<FocusableElement>): TableCellAria {\n  let {gridCellProps, isPressed} = useGridCell(props, state, ref);\n\n  let columnKey = props.node.column.key;\n  if (state.collection.rowHeaderColumnKeys.has(columnKey)) {\n    gridCellProps.role = 'rowheader';\n    gridCellProps.id = getCellId(state, props.node.parentKey, columnKey);\n  }\n\n  return {\n    gridCellProps,\n    isPressed\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AA+CO,SAASA,0CAAgBC,KAAyB,EAAEC,KAAoB,EAAEC,GAAgC;EAC/G,IAAI;IAAAC,aAAA,EAACA,aAAa;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,kBAAU,EAAEL,KAAA,EAAOC,KAAA,EAAOC,GAAA;EAE3D,IAAII,SAAA,GAAYN,KAAA,CAAMO,IAAI,CAACC,MAAM,CAACC,GAAG;EACrC,IAAIR,KAAA,CAAMS,UAAU,CAACC,mBAAmB,CAACC,GAAG,CAACN,SAAA,GAAY;IACvDH,aAAA,CAAcU,IAAI,GAAG;IACrBV,aAAA,CAAcW,EAAE,GAAG,IAAAC,yCAAQ,EAAEd,KAAA,EAAOD,KAAA,CAAMO,IAAI,CAACS,SAAS,EAAEV,SAAA;EAC5D;EAEA,OAAO;mBACLH,aAAA;eACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}