{"ast":null,"code":"// src/use-multiselect-list-state.ts\nimport { useListState } from \"@react-stately/list\";\nimport { useMemo } from \"react\";\nfunction useMultiSelectListState(props) {\n  const {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectionManager: {\n      setSelectedKeys,\n      selectedKeys,\n      selectionMode\n    }\n  } = useListState(props);\n  const missingKeys = useMemo(() => {\n    if (!props.isLoading && selectedKeys.size !== 0) {\n      return Array.from(selectedKeys).filter(Boolean).filter(key => !collection.getItem(key));\n    }\n    return [];\n  }, [selectedKeys, collection]);\n  const selectedItems = selectedKeys.size !== 0 ? Array.from(selectedKeys).map(key => {\n    return collection.getItem(key);\n  }).filter(Boolean) : null;\n  if (missingKeys.length) {\n    console.warn(`Select: Keys \"${missingKeys.join(\", \")}\" passed to \"selectedKeys\" are not present in the collection.`);\n  }\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectionMode,\n    selectedKeys,\n    setSelectedKeys: setSelectedKeys.bind(selectionManager),\n    selectedItems\n  };\n}\nexport { useMultiSelectListState };","map":{"version":3,"names":["useListState","useMemo","useMultiSelectListState","props","collection","disabledKeys","selectionManager","setSelectedKeys","selectedKeys","selectionMode","missingKeys","isLoading","size","Array","from","filter","Boolean","key","getItem","selectedItems","map","length","console","warn","join","bind"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@nextui-org/use-aria-multiselect/dist/chunk-RVB7J7GX.mjs"],"sourcesContent":["// src/use-multiselect-list-state.ts\nimport { useListState } from \"@react-stately/list\";\nimport { useMemo } from \"react\";\nfunction useMultiSelectListState(props) {\n  const {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectionManager: { setSelectedKeys, selectedKeys, selectionMode }\n  } = useListState(props);\n  const missingKeys = useMemo(() => {\n    if (!props.isLoading && selectedKeys.size !== 0) {\n      return Array.from(selectedKeys).filter(Boolean).filter((key) => !collection.getItem(key));\n    }\n    return [];\n  }, [selectedKeys, collection]);\n  const selectedItems = selectedKeys.size !== 0 ? Array.from(selectedKeys).map((key) => {\n    return collection.getItem(key);\n  }).filter(Boolean) : null;\n  if (missingKeys.length) {\n    console.warn(\n      `Select: Keys \"${missingKeys.join(\n        \", \"\n      )}\" passed to \"selectedKeys\" are not present in the collection.`\n    );\n  }\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectionMode,\n    selectedKeys,\n    setSelectedKeys: setSelectedKeys.bind(selectionManager),\n    selectedItems\n  };\n}\n\nexport {\n  useMultiSelectListState\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,uBAAuBA,CAACC,KAAK,EAAE;EACtC,MAAM;IACJC,UAAU;IACVC,YAAY;IACZC,gBAAgB;IAChBA,gBAAgB,EAAE;MAAEC,eAAe;MAAEC,YAAY;MAAEC;IAAc;EACnE,CAAC,GAAGT,YAAY,CAACG,KAAK,CAAC;EACvB,MAAMO,WAAW,GAAGT,OAAO,CAAC,MAAM;IAChC,IAAI,CAACE,KAAK,CAACQ,SAAS,IAAIH,YAAY,CAACI,IAAI,KAAK,CAAC,EAAE;MAC/C,OAAOC,KAAK,CAACC,IAAI,CAACN,YAAY,CAAC,CAACO,MAAM,CAACC,OAAO,CAAC,CAACD,MAAM,CAAEE,GAAG,IAAK,CAACb,UAAU,CAACc,OAAO,CAACD,GAAG,CAAC,CAAC;IAC3F;IACA,OAAO,EAAE;EACX,CAAC,EAAE,CAACT,YAAY,EAAEJ,UAAU,CAAC,CAAC;EAC9B,MAAMe,aAAa,GAAGX,YAAY,CAACI,IAAI,KAAK,CAAC,GAAGC,KAAK,CAACC,IAAI,CAACN,YAAY,CAAC,CAACY,GAAG,CAAEH,GAAG,IAAK;IACpF,OAAOb,UAAU,CAACc,OAAO,CAACD,GAAG,CAAC;EAChC,CAAC,CAAC,CAACF,MAAM,CAACC,OAAO,CAAC,GAAG,IAAI;EACzB,IAAIN,WAAW,CAACW,MAAM,EAAE;IACtBC,OAAO,CAACC,IAAI,CACV,iBAAiBb,WAAW,CAACc,IAAI,CAC/B,IACF,CAAC,+DACH,CAAC;EACH;EACA,OAAO;IACLpB,UAAU;IACVC,YAAY;IACZC,gBAAgB;IAChBG,aAAa;IACbD,YAAY;IACZD,eAAe,EAAEA,eAAe,CAACkB,IAAI,CAACnB,gBAAgB,CAAC;IACvDa;EACF,CAAC;AACH;AAEA,SACEjB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}