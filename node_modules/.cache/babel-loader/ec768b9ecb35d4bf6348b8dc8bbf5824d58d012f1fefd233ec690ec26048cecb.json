{"ast":null,"code":"import { useButton as $701a24aa0da5b062$export$ea18c227d4417cc3 } from \"./useButton.mjs\";\nimport { chain as $h7Tql$chain, mergeProps as $h7Tql$mergeProps } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n  const {\n    isSelected: isSelected\n  } = state;\n  const {\n    isPressed: isPressed,\n    buttonProps: buttonProps\n  } = (0, $701a24aa0da5b062$export$ea18c227d4417cc3)({\n    ...props,\n    onPress: (0, $h7Tql$chain)(state.toggle, props.onPress)\n  }, ref);\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, $h7Tql$mergeProps)(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\nexport { $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton };","map":{"version":3,"names":["$55f54f7887471b58$export$51e84d46ca0bc451","props","state","ref","isSelected","isPressed","buttonProps","$701a24aa0da5b062$export$ea18c227d4417cc3","onPress","$h7Tql$chain","toggle","$h7Tql$mergeProps"],"sources":["/Users/mario/Documents/Development/portfolio/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useToggleButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain, mergeProps} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport interface AriaToggleButtonOptions<E extends ElementType> extends Omit<AriaToggleButtonProps<E>, 'children'> {}\n\n// Order with overrides is important: 'button' should be default\nexport function useToggleButton(props: AriaToggleButtonOptions<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<ElementType>, state: ToggleState, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonOptions<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAuCO,SAASA,0CAAgBC,KAA2C,EAAEC,KAAkB,EAAEC,GAAmB;EAClH,MAAM;IAAAC,UAAA,EAACA;EAAU,CAAC,GAAGF,KAAA;EACrB,MAAM;IAAAG,SAAA,EAACA,SAAS;IAAAC,WAAA,EAAEA;EAAW,CAAC,GAAG,IAAAC,yCAAQ,EAAE;IACzC,GAAGN,KAAK;IACRO,OAAA,EAAS,IAAAC,YAAI,EAAEP,KAAA,CAAMQ,MAAM,EAAET,KAAA,CAAMO,OAAO;EAC5C,GAAGL,GAAA;EAEH,OAAO;eACLE,SAAA;IACAC,WAAA,EAAa,IAAAK,iBAAS,EAAEL,WAAA,EAAa;MACnC,gBAAgBF;IAClB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}